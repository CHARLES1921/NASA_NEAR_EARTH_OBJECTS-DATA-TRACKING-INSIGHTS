{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/CHARLES1921/NASA_NEAR_EARTH_OBJECTS-DATA-TRACKING-INSIGHTS/blob/main/NASA_NEAR_EARTH_OBJECTS\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 1\"Fetching Asteroid Data from NASA's NEO API\"\n",
        "\n",
        "#\"NASA NEO API: Asteroid Data Collection Script\"\n",
        "\n",
        "API_KEY= 'QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7'\n",
        "import requests\n",
        "url=f\"https://api.nasa.gov/neo/rest/v1/feed?start_date=2024-01-01&end_date=2024-01-08&api_key={API_KEY}\"\n",
        "\n",
        "requests.get(url)\n",
        "target = 10000"
      ],
      "metadata": {
        "id": "nxjJGeROMa5c"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "StX8sup1vSSC",
        "outputId": "f2195229-16a9-47d6-ef8d-e10884cef81d",
        "collapsed": true
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collected 0 unique asteroids... Fetching from: https://api.nasa.gov/neo/rest/v1/feed?start_date=2024-01-01&end_date=2024-01-08&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 129 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-01-08&end_date=2024-01-15&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 268 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-01-15&end_date=2024-01-22&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 383 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-01-22&end_date=2024-01-29&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 522 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-01-29&end_date=2024-02-05&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 672 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-02-05&end_date=2024-02-12&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 787 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-02-12&end_date=2024-02-19&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 937 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-02-19&end_date=2024-02-26&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 1049 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-02-26&end_date=2024-03-04&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 1195 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-03-04&end_date=2024-03-11&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 1311 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-03-11&end_date=2024-03-18&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 1423 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-03-18&end_date=2024-03-25&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 1551 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-03-25&end_date=2024-04-01&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 1662 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-04-01&end_date=2024-04-08&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 1802 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-04-08&end_date=2024-04-15&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 1955 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-04-15&end_date=2024-04-22&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 2089 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-04-22&end_date=2024-04-29&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 2225 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-04-29&end_date=2024-05-06&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 2348 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-05-06&end_date=2024-05-13&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 2467 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-05-13&end_date=2024-05-20&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 2560 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-05-20&end_date=2024-05-27&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 2655 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-05-27&end_date=2024-06-03&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 2756 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-06-03&end_date=2024-06-10&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 2847 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-06-10&end_date=2024-06-17&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 2940 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-06-17&end_date=2024-06-24&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 3029 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-06-24&end_date=2024-07-01&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 3117 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-07-01&end_date=2024-07-08&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 3199 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-07-08&end_date=2024-07-15&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 3272 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-07-15&end_date=2024-07-22&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 3346 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-07-22&end_date=2024-07-29&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 3418 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-07-29&end_date=2024-08-05&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 3520 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-08-05&end_date=2024-08-12&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 3612 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-08-12&end_date=2024-08-19&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 3706 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-08-19&end_date=2024-08-26&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 3805 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-08-26&end_date=2024-09-02&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 3918 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-09-02&end_date=2024-09-09&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 4054 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-09-09&end_date=2024-09-16&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 4186 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-09-16&end_date=2024-09-23&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 4328 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-09-23&end_date=2024-09-30&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 4484 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-09-30&end_date=2024-10-07&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 4661 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-10-07&end_date=2024-10-14&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 4808 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-10-14&end_date=2024-10-21&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 4933 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-10-21&end_date=2024-10-28&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 5065 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-10-28&end_date=2024-11-04&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 5197 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-11-04&end_date=2024-11-11&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 5314 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-11-11&end_date=2024-11-18&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 5422 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-11-18&end_date=2024-11-25&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 5549 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-11-25&end_date=2024-12-02&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 5682 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-12-02&end_date=2024-12-09&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 5811 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-12-09&end_date=2024-12-16&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 5905 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-12-16&end_date=2024-12-23&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 6001 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-12-23&end_date=2024-12-30&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 6112 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2024-12-30&end_date=2025-01-06&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 6201 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-01-06&end_date=2025-01-13&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 6272 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-01-13&end_date=2025-01-20&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 6371 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-01-20&end_date=2025-01-27&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 6440 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-01-27&end_date=2025-02-03&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 6525 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-02-03&end_date=2025-02-10&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 6603 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-02-10&end_date=2025-02-17&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 6681 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-02-17&end_date=2025-02-24&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 6781 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-02-24&end_date=2025-03-03&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 6882 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-03-03&end_date=2025-03-10&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 6962 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-03-10&end_date=2025-03-17&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 7046 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-03-17&end_date=2025-03-24&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 7140 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-03-24&end_date=2025-03-31&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 7231 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-03-31&end_date=2025-04-07&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 7313 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-04-07&end_date=2025-04-14&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 7380 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-04-14&end_date=2025-04-21&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 7464 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-04-21&end_date=2025-04-28&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 7567 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-04-28&end_date=2025-05-05&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 7643 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-05-05&end_date=2025-05-12&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 7715 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-05-12&end_date=2025-05-19&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 7774 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-05-19&end_date=2025-05-26&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 7848 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-05-26&end_date=2025-06-02&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 7907 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-06-02&end_date=2025-06-09&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 7969 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-06-09&end_date=2025-06-16&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 8030 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-06-16&end_date=2025-06-23&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 8088 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-06-23&end_date=2025-06-30&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 8153 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-06-30&end_date=2025-07-07&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 8214 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-07-07&end_date=2025-07-14&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 8266 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-07-14&end_date=2025-07-21&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 8302 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-07-21&end_date=2025-07-28&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 8336 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-07-28&end_date=2025-08-04&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 8384 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-08-04&end_date=2025-08-11&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 8420 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-08-11&end_date=2025-08-18&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 8460 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-08-18&end_date=2025-08-25&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 8500 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-08-25&end_date=2025-09-01&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 8531 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-09-01&end_date=2025-09-08&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 8567 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-09-08&end_date=2025-09-15&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 8608 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-09-15&end_date=2025-09-22&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 8655 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-09-22&end_date=2025-09-29&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 8707 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-09-29&end_date=2025-10-06&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 8760 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-10-06&end_date=2025-10-13&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 8793 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-10-13&end_date=2025-10-20&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 8842 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-10-20&end_date=2025-10-27&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 8895 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-10-27&end_date=2025-11-03&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 8934 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-11-03&end_date=2025-11-10&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 8987 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-11-10&end_date=2025-11-17&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 9033 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-11-17&end_date=2025-11-24&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 9089 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-11-24&end_date=2025-12-01&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 9138 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-12-01&end_date=2025-12-08&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 9169 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-12-08&end_date=2025-12-15&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 9210 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-12-15&end_date=2025-12-22&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 9253 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-12-22&end_date=2025-12-29&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 9295 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2025-12-29&end_date=2026-01-05&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 9328 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2026-01-05&end_date=2026-01-12&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 9365 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2026-01-12&end_date=2026-01-19&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 9401 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2026-01-19&end_date=2026-01-26&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 9442 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2026-01-26&end_date=2026-02-02&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 9472 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2026-02-02&end_date=2026-02-09&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 9508 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2026-02-09&end_date=2026-02-16&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 9544 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2026-02-16&end_date=2026-02-23&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 9579 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2026-02-23&end_date=2026-03-02&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 9615 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2026-03-02&end_date=2026-03-09&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 9660 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2026-03-09&end_date=2026-03-16&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 9713 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2026-03-16&end_date=2026-03-23&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 9757 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2026-03-23&end_date=2026-03-30&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 9800 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2026-03-30&end_date=2026-04-06&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 9834 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2026-04-06&end_date=2026-04-13&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 9865 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2026-04-13&end_date=2026-04-20&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 9904 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2026-04-20&end_date=2026-04-27&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 9938 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2026-04-27&end_date=2026-05-04&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n",
            "Collected 9983 unique asteroids... Fetching from: http://api.nasa.gov/neo/rest/v1/feed?start_date=2026-05-04&end_date=2026-05-11&detailed=false&api_key=QJbMRtL5ujDIP63Zma5PMsQ7XL7CuSxAFOPoudY7\n"
          ]
        }
      ],
      "source": [
        "# Step 2: Fetch data until we reach 10000 unique asteroids\n",
        "import requests\n",
        "from collections import defaultdict\n",
        "from datetime import datetime\n",
        "unique_asteroids = {}\n",
        "nasa_data = []\n",
        "\n",
        "\n",
        "while len(unique_asteroids) < target:\n",
        "    print(f\"Collected {len(unique_asteroids)} unique asteroids... Fetching from: {url}\")\n",
        "    response = requests.get(url)\n",
        "    data = response.json()\n",
        "    details = data['near_earth_objects']\n",
        "\n",
        "    for date, ast_details in details.items():\n",
        "        for ast in ast_details:\n",
        "            if 'close_approach_data' not in ast or not ast['close_approach_data']:\n",
        "                continue\n",
        "\n",
        "            approach = ast['close_approach_data'][0]\n",
        "\n",
        "            asteroid_data = {\n",
        "                'id': int(ast['id']),\n",
        "                'neo_reference_id': ast['neo_reference_id'],\n",
        "                'name': ast['name'],\n",
        "                'absolute_magnitude_h': ast['absolute_magnitude_h'],\n",
        "                'estimated_diameter_min_km': ast['estimated_diameter']['kilometers']['estimated_diameter_min'],\n",
        "                'estimated_diameter_max_km': ast['estimated_diameter']['kilometers']['estimated_diameter_max'],\n",
        "                'is_potentially_hazardous_asteroid': ast['is_potentially_hazardous_asteroid'],\n",
        "                'close_approach_data': datetime.strptime(approach['close_approach_date'], \"%Y-%m-%d\").date(),\n",
        "                'relative_velocity_km': float(approach['relative_velocity']['kilometers_per_hour']),\n",
        "                'astronomical_unit': float(approach['miss_distance']['astronomical']),\n",
        "                'miss_distance_kilometers': float(approach['miss_distance']['kilometers']),\n",
        "                'miss_distance_lunar': float(approach['miss_distance']['lunar']),\n",
        "                'orbiting_body': approach['orbiting_body']\n",
        "            }\n",
        "\n",
        "            nasa_data.append(asteroid_data)\n",
        "\n",
        "            # Store only unique asteroids by ID\n",
        "            if asteroid_data['id'] not in unique_asteroids:\n",
        "                unique_asteroids[asteroid_data['id']] = asteroid_data\n",
        "\n",
        "            if len(unique_asteroids) >= target:\n",
        "                break\n",
        "        if len(unique_asteroids) >= target:\n",
        "            break\n",
        "\n",
        "    url = data['links']['next']  # Move to next page"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(nasa_data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Jv1TGtoMO05C",
        "outputId": "48e394d9-a0d8-4c79-80d6-507f2c36370b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "14796"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j5WBQOyNIkQj",
        "outputId": "ff7c8902-e272-4263-c5f5-5f21883b6c6e",
        "collapsed": true
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: mysql-connector-python in /usr/local/lib/python3.11/dist-packages (9.3.0)\n"
          ]
        }
      ],
      "source": [
        "# Step 3 Connecting Mysql & Python  Creating a pipeline\n",
        "pip install mysql-connector-python"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Now importing modules for:\n",
        "\n",
        "#Fetching data from an API (requests)\n",
        "\n",
        "#Handling JSON data (json)\n",
        "\n",
        "#Working with dates (datetime)\n",
        "\n",
        "#Connecting to a MySQL database (mysql.connector)\n",
        "\n",
        "\n",
        "\n",
        "#Step 4\"Connecting to NASA MySQL Database using Python and TiDB Cloud\"\n",
        "\n",
        "import requests\n",
        "import json\n",
        "from datetime import datetime\n",
        "import mysql.connector\n",
        "\n",
        "#  Connect to MySQL\n",
        "conn = mysql.connector.connect(\n",
        "    host=\"gateway01.eu-central-1.prod.aws.tidbcloud.com\",\n",
        "    user=\"Tf6RqboHNPV8kyH.root\",\n",
        "    password=\"fn8OtaiwT8YNm99R\",\n",
        "    port=4000,\n",
        "    database=\"Nasa\"\n",
        ")\n",
        "cursor = conn.cursor()"
      ],
      "metadata": {
        "id": "k6fvb20rR9zD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 5: Create tables\n",
        "cursor.execute(\"\"\"\n",
        "CREATE TABLE IF NOT EXISTS Asteroids (\n",
        "    id INT PRIMARY KEY,\n",
        "    name VARCHAR(100),\n",
        "    absolute_magnitude_h FLOAT,\n",
        "    estimated_diameter_min_km FLOAT,\n",
        "    estimated_diameter_max_km FLOAT,\n",
        "    is_potentially_hazardous_asteroid BOOLEAN\n",
        ")\n",
        "\"\"\")\n",
        "\n",
        "cursor.execute(\"\"\"\n",
        "CREATE TABLE IF NOT EXISTS close_approach (\n",
        "    id INT AUTO_INCREMENT PRIMARY KEY,\n",
        "    neo_reference_id VARCHAR(50),\n",
        "    close_approach_date DATE,\n",
        "    relative_velocity_km FLOAT,\n",
        "    astronomical FLOAT,\n",
        "    miss_distance_km FLOAT,\n",
        "    miss_distance_lunar FLOAT,\n",
        "    orbiting_body VARCHAR(100)\n",
        ")\n",
        "\"\"\")\n",
        "\n",
        "conn.commit()"
      ],
      "metadata": {
        "id": "nTFKfcz4THsU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Step 6: Insert unique asteroids\n",
        "unique_asteroids = {}\n",
        "for i in nasa_data:\n",
        "    if i['id'] not in unique_asteroids:\n",
        "        unique_asteroids[i['id']] = i\n",
        "\n",
        "insert_asteroids_sql = \"\"\"\n",
        "INSERT INTO Asteroids (\n",
        "    id,\n",
        "    name,\n",
        "    absolute_magnitude_h,\n",
        "    estimated_diameter_min_km,\n",
        "    estimated_diameter_max_km,\n",
        "    is_potentially_hazardous_asteroid\n",
        ") VALUES (%s, %s, %s, %s, %s, %s)\n",
        "ON DUPLICATE KEY UPDATE\n",
        "    name=VALUES(name),\n",
        "    absolute_magnitude_h=VALUES(absolute_magnitude_h),\n",
        "    estimated_diameter_min_km=VALUES(estimated_diameter_min_km),\n",
        "    estimated_diameter_max_km=VALUES(estimated_diameter_max_km),\n",
        "    is_potentially_hazardous_asteroid=VALUES(is_potentially_hazardous_asteroid)\n",
        "\n",
        "\"\"\"\n",
        "\n",
        "for asteroid in unique_asteroids.values():\n",
        "    cursor.execute(insert_asteroids_sql, (\n",
        "        asteroid['id'],\n",
        "        asteroid['name'],\n",
        "        asteroid['absolute_magnitude_h'],\n",
        "        asteroid['estimated_diameter_min_km'],\n",
        "        asteroid['estimated_diameter_max_km'],\n",
        "        asteroid['is_potentially_hazardous_asteroid']\n",
        "    ))\n",
        "\n",
        "conn.commit()\n",
        "print(\"✅ Successfully inserted into Asteroids Table\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IQfMJHTVTTgG",
        "outputId": "36687a28-80cd-4814-aae2-26a1fd926bff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Successfully inserted into Asteroids Table\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#\"Describing Table Structure: close_approach\"\n",
        "\n",
        "cursor = conn.cursor()\n",
        "cursor.execute(\"DESCRIBE close_approach\")"
      ],
      "metadata": {
        "id": "bkNuz1kRgLAI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#\"Outputting Schema Details for Verification\"\n",
        "\n",
        "for row in cursor.fetchall():\n",
        "    print(row)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F3JwdEmRgkxK",
        "outputId": "9c744239-0541-4cf7-f677-a090d6be57cf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "('id', 'int(11)', 'NO', 'PRI', None, 'auto_increment')\n",
            "('neo_reference_id', 'varchar(50)', 'YES', '', None, '')\n",
            "('close_approach_date', 'date', 'YES', '', None, '')\n",
            "('relative_velocity_kmph', 'float', 'YES', '', None, '')\n",
            "('astronomical', 'float', 'YES', '', None, '')\n",
            "('miss_distance_km', 'float', 'YES', '', None, '')\n",
            "('miss_distance_lunar', 'float', 'YES', '', None, '')\n",
            "('orbiting_body', 'varchar(100)', 'YES', '', None, '')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 7: Insert close approach data\n",
        "conn = mysql.connector.connect(\n",
        "    host=\"gateway01.eu-central-1.prod.aws.tidbcloud.com\",\n",
        "    user=\"Tf6RqboHNPV8kyH.root\",\n",
        "    password=\"fn8OtaiwT8YNm99R\",\n",
        "    port=4000,\n",
        "    database=\"Nasa\"\n",
        ")\n",
        "cursor = conn.cursor()\n",
        "\n",
        "insert_close_approach_sql = \"\"\"\n",
        "INSERT INTO close_approach (\n",
        "    neo_reference_id,\n",
        "    close_approach_date,\n",
        "    relative_velocity_kmph,\n",
        "    astronomical,\n",
        "    miss_distance_km,\n",
        "    miss_distance_lunar,\n",
        "    orbiting_body\n",
        ") VALUES (%s, %s, %s, %s, %s, %s, %s)\n",
        "\"\"\"\n",
        "\n",
        "for i in nasa_data:\n",
        "    cursor.execute(insert_close_approach_sql, (\n",
        "        i['neo_reference_id'],\n",
        "        i['close_approach_data'],  # Already a single value, not a list\n",
        "        i['relative_velocity_km'],\n",
        "        i['astronomical_unit'],\n",
        "        i['miss_distance_kilometers'],\n",
        "        i['miss_distance_lunar'],\n",
        "        i['orbiting_body']\n",
        "    ))\n",
        "\n",
        "conn.commit()\n",
        "\n",
        "print(\"✅ Successfully inserted into close_approach Table.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vV88Q56SoGFx",
        "outputId": "4e85ffc6-3a63-47fe-c071-11ec879014da"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Successfully inserted into close_approach Table.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "id": "Ng8Mb5JuTZNy",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 527
        },
        "outputId": "b2d446b0-a3ad-45cf-9e2b-e36f0bafc9db"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "             id                       name  absolute_magnitude_h  \\\n",
              "0       2000433         433 Eros (A898 PA)                10.400   \n",
              "1       2000887       887 Alinda (A918 AA)                13.820   \n",
              "2       2001620  1620 Geographos (1951 RA)                15.270   \n",
              "3       2001685        1685 Toro (1948 OA)                14.280   \n",
              "4       2001865    1865 Cerberus (1971 UA)                16.790   \n",
              "...         ...                        ...                   ...   \n",
              "9999   54538191                 (2025 NN1)                30.254   \n",
              "10000  54538192                 (2025 NO1)                31.195   \n",
              "10001  54538215                 (2025 NQ1)                23.639   \n",
              "10002  54538216                 (2025 NR1)                23.019   \n",
              "10003  54538217                 (2025 NS1)                26.806   \n",
              "\n",
              "       estimated_diameter_min_km  estimated_diameter_max_km  \\\n",
              "0                      22.108280                  49.435620   \n",
              "1                       4.576726                  10.233872   \n",
              "2                       2.347226                   5.248558   \n",
              "3                       3.703011                   8.280184   \n",
              "4                       1.165615                   2.606394   \n",
              "...                          ...                        ...   \n",
              "9999                    0.002365                   0.005287   \n",
              "10000                   0.001533                   0.003428   \n",
              "10001                   0.049746                   0.111235   \n",
              "10002                   0.066184                   0.147993   \n",
              "10003                   0.011571                   0.025873   \n",
              "\n",
              "       is_potentially_hazardous_asteroid  \n",
              "0                                      0  \n",
              "1                                      0  \n",
              "2                                      1  \n",
              "3                                      0  \n",
              "4                                      0  \n",
              "...                                  ...  \n",
              "9999                                   0  \n",
              "10000                                  0  \n",
              "10001                                  0  \n",
              "10002                                  0  \n",
              "10003                                  0  \n",
              "\n",
              "[10004 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a77d5998-729d-4744-bdaf-84117dfdc20e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>name</th>\n",
              "      <th>absolute_magnitude_h</th>\n",
              "      <th>estimated_diameter_min_km</th>\n",
              "      <th>estimated_diameter_max_km</th>\n",
              "      <th>is_potentially_hazardous_asteroid</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2000433</td>\n",
              "      <td>433 Eros (A898 PA)</td>\n",
              "      <td>10.400</td>\n",
              "      <td>22.108280</td>\n",
              "      <td>49.435620</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2000887</td>\n",
              "      <td>887 Alinda (A918 AA)</td>\n",
              "      <td>13.820</td>\n",
              "      <td>4.576726</td>\n",
              "      <td>10.233872</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2001620</td>\n",
              "      <td>1620 Geographos (1951 RA)</td>\n",
              "      <td>15.270</td>\n",
              "      <td>2.347226</td>\n",
              "      <td>5.248558</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2001685</td>\n",
              "      <td>1685 Toro (1948 OA)</td>\n",
              "      <td>14.280</td>\n",
              "      <td>3.703011</td>\n",
              "      <td>8.280184</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2001865</td>\n",
              "      <td>1865 Cerberus (1971 UA)</td>\n",
              "      <td>16.790</td>\n",
              "      <td>1.165615</td>\n",
              "      <td>2.606394</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9999</th>\n",
              "      <td>54538191</td>\n",
              "      <td>(2025 NN1)</td>\n",
              "      <td>30.254</td>\n",
              "      <td>0.002365</td>\n",
              "      <td>0.005287</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10000</th>\n",
              "      <td>54538192</td>\n",
              "      <td>(2025 NO1)</td>\n",
              "      <td>31.195</td>\n",
              "      <td>0.001533</td>\n",
              "      <td>0.003428</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10001</th>\n",
              "      <td>54538215</td>\n",
              "      <td>(2025 NQ1)</td>\n",
              "      <td>23.639</td>\n",
              "      <td>0.049746</td>\n",
              "      <td>0.111235</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10002</th>\n",
              "      <td>54538216</td>\n",
              "      <td>(2025 NR1)</td>\n",
              "      <td>23.019</td>\n",
              "      <td>0.066184</td>\n",
              "      <td>0.147993</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10003</th>\n",
              "      <td>54538217</td>\n",
              "      <td>(2025 NS1)</td>\n",
              "      <td>26.806</td>\n",
              "      <td>0.011571</td>\n",
              "      <td>0.025873</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10004 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a77d5998-729d-4744-bdaf-84117dfdc20e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a77d5998-729d-4744-bdaf-84117dfdc20e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a77d5998-729d-4744-bdaf-84117dfdc20e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-05318ab6-52dd-413e-a19d-b93f234309b9\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-05318ab6-52dd-413e-a19d-b93f234309b9')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-05318ab6-52dd-413e-a19d-b93f234309b9 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_90e5986d-c93d-43ee-afd5-19073bd14338\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('new_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_90e5986d-c93d-43ee-afd5-19073bd14338 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('new_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "new_df",
              "summary": "{\n  \"name\": \"new_df\",\n  \"rows\": 10004,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24400039,\n        \"min\": 2000433,\n        \"max\": 54538217,\n        \"num_unique_values\": 10004,\n        \"samples\": [\n          3799640,\n          54177599,\n          54483143\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10004,\n        \"samples\": [\n          \"(2018 CD14)\",\n          \"(2021 PO)\",\n          \"(2024 SF3)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"absolute_magnitude_h\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.626180339734549,\n        \"min\": 10.4,\n        \"max\": 32.61,\n        \"num_unique_values\": 1323,\n        \"samples\": [\n          18.33,\n          22.48,\n          22.01\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"estimated_diameter_min_km\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2662367613791604,\n        \"min\": 0.0007990151,\n        \"max\": 22.10828,\n        \"num_unique_values\": 1323,\n        \"samples\": [\n          0.57352847,\n          0.084831074,\n          0.1053307\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"estimated_diameter_max_km\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5953235225412139,\n        \"min\": 0.001786652,\n        \"max\": 49.43562,\n        \"num_unique_values\": 1323,\n        \"samples\": [\n          1.2824486,\n          0.18968806,\n          0.2355266\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"is_potentially_hazardous_asteroid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "#following script performs the following tasks:\n",
        "#Connects to a MySQL database (Nasa) hosted on TiDB Cloud\n",
        "#Executes a SQL query (SELECT * FROM asteroids)\n",
        "#Fetches all results and column names\n",
        "#Loads the data into a Pandas DataFrame\n",
        "#Displays the DataFrame using display()\n",
        "#Closes the cursor and connection\n",
        "\n",
        "\n",
        "import mysql.connector\n",
        "import pandas as pd\n",
        "\n",
        "conn = mysql.connector.connect(host=\"gateway01.eu-central-1.prod.aws.tidbcloud.com\",\n",
        "                               user=\"Tf6RqboHNPV8kyH.root\",\n",
        "                               password=\"fn8OtaiwT8YNm99R\",\n",
        "                               port = 4000,\n",
        "                               database = \"Nasa\") # Connect to the 'Nasa' database\n",
        "cursor = conn.cursor() # Re-create the cursor after connecting to the database\n",
        "\n",
        "cursor.execute(\"SELECT * FROM asteroids\")\n",
        "data = cursor.fetchall()\n",
        "#fetches the names of your columns in dataframe(cursor.description holds the columns info)\n",
        "columns = [i[0] for i in cursor.description]\n",
        "\n",
        "# using the result fetched in cursor, create a new dataframe\n",
        "new_df = pd.DataFrame(data,columns=columns)\n",
        "display(new_df) # shows all the values inserted - 7 columns\n",
        "\n",
        "cursor.close()\n",
        "conn.close()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "buX3fAcz3tPB"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "from datetime import datetime\n",
        "import mysql.connector"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6kVsGx17LOot"
      },
      "outputs": [],
      "source": [
        "conn = mysql.connector.connect(host=\"gateway01.eu-central-1.prod.aws.tidbcloud.com\",\n",
        "                               user=\"Tf6RqboHNPV8kyH.root\",\n",
        "                               password=\"fn8OtaiwT8YNm99R\",\n",
        "                               port = 4000,\n",
        "                               database = \"Nasa\") # Connect to the 'Nasa' database\n",
        "cursor = conn.cursor() # Re-create the cursor after connecting to the database"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2M_kI_jht_wK"
      },
      "outputs": [],
      "source": [
        "#Step :9 \"Filtering Unique Asteroids by ID from NASA Data\"\n",
        "# It removes duplicate asteroid entries\n",
        " #(in case the same asteroid appears multiple times in the dataset) and stores only the first occurrence of each unique asteroid.\n",
        "\n",
        "unique_asteroids = {}\n",
        "for i in nasa_data:\n",
        "    if i['id'] not in unique_asteroids:\n",
        "        unique_asteroids[i['id']] = i"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Q3MXWOWO4Vf0"
      },
      "outputs": [],
      "source": [
        "#\"Converting NASA Asteroid Data to a Pandas DataFrame\"\n",
        "df = pd.DataFrame(nasa_data)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_mdSHozA_jmv",
        "outputId": "e3e388c0-3698-4b25-dd59-f82f3eb71abc",
        "collapsed": true
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['id', 'neo_reference_id', 'name', 'absolute_magnitude_h',\n",
              "       'estimated_diameter_min_km', 'estimated_diameter_max_km',\n",
              "       'is_potentially_hazardous_asteroid', 'close_approach_data',\n",
              "       'relative_velocity_km', 'astronomical_unit', 'miss_distance_kilometers',\n",
              "       'miss_distance_lunar', 'orbiting_body'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ],
      "source": [
        "#\"Displaying Column Names of the NASA Asteroid DataFrame\"\n",
        "df.columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bbZsZStKz_ea"
      },
      "outputs": [],
      "source": [
        "# \"Function to Run and Display SQL Queries as Pandas DataFrames\"\n",
        "def show_query(query):\n",
        "    df = pd.read_sql(query, con=conn)  # Use pandas read_sql\n",
        "    display(df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        },
        "id": "rFPdrCR4cFez",
        "outputId": "a8f2566e-ec2e-42b7-d8fe-6db7d1d0751d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-55-2685788363.py:2: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
            "  df = pd.read_sql(query, con=conn)  # Use pandas read_sql\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "      neo_reference_id  approach_count\n",
              "0             54342587              21\n",
              "1              3825135              21\n",
              "2             54137806              20\n",
              "3             54469024              20\n",
              "4              3738932              19\n",
              "...                ...             ...\n",
              "9999           3840809               2\n",
              "10000          3786454               2\n",
              "10001          3672904               2\n",
              "10002          3840701               1\n",
              "10003          3837637               1\n",
              "\n",
              "[10004 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-545d1d9f-7320-4268-b221-b0f7a2f8816f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>neo_reference_id</th>\n",
              "      <th>approach_count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>54342587</td>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3825135</td>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>54137806</td>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>54469024</td>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3738932</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9999</th>\n",
              "      <td>3840809</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10000</th>\n",
              "      <td>3786454</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10001</th>\n",
              "      <td>3672904</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10002</th>\n",
              "      <td>3840701</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10003</th>\n",
              "      <td>3837637</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10004 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-545d1d9f-7320-4268-b221-b0f7a2f8816f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-545d1d9f-7320-4268-b221-b0f7a2f8816f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-545d1d9f-7320-4268-b221-b0f7a2f8816f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-2c5c1932-313e-4850-aa29-52c6e74ca96d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2c5c1932-313e-4850-aa29-52c6e74ca96d')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-2c5c1932-313e-4850-aa29-52c6e74ca96d button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"show_query(query1)\",\n  \"rows\": 10004,\n  \"fields\": [\n    {\n      \"column\": \"neo_reference_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10004,\n        \"samples\": [\n          \"54134954\",\n          \"3991576\",\n          \"54051583\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"approach_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 21,\n        \"num_unique_values\": 21,\n        \"samples\": [\n          21,\n          4,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Running give 15 Queries\n",
        "query1 = '''\n",
        "SELECT neo_reference_id, COUNT(*) AS approach_count\n",
        "FROM close_approach\n",
        "GROUP BY neo_reference_id\n",
        "ORDER BY approach_count DESC\n",
        "'''\n",
        "show_query(query1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        },
        "id": "BoATdHhWcOS5",
        "outputId": "5443bd3f-c5b0-4b2f-f3d1-d5a253039ca8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-55-2685788363.py:2: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
            "  df = pd.read_sql(query, con=conn)  # Use pandas read_sql\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "      neo_reference_id   avg_velocity\n",
              "0             54277079  190513.421875\n",
              "1              2504181  186135.890625\n",
              "2             54392072  173071.828125\n",
              "3             54239841  162470.750000\n",
              "4              3803884  161520.890625\n",
              "...                ...            ...\n",
              "9999           3712886    2783.641602\n",
              "10000         54459240    2149.995361\n",
              "10001          3798020    1909.578125\n",
              "10002         54440316    1610.566895\n",
              "10003         54429761    1418.218506\n",
              "\n",
              "[10004 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9f058916-fc2f-4c18-ab50-dc9ec1b18eec\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>neo_reference_id</th>\n",
              "      <th>avg_velocity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>54277079</td>\n",
              "      <td>190513.421875</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2504181</td>\n",
              "      <td>186135.890625</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>54392072</td>\n",
              "      <td>173071.828125</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>54239841</td>\n",
              "      <td>162470.750000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3803884</td>\n",
              "      <td>161520.890625</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9999</th>\n",
              "      <td>3712886</td>\n",
              "      <td>2783.641602</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10000</th>\n",
              "      <td>54459240</td>\n",
              "      <td>2149.995361</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10001</th>\n",
              "      <td>3798020</td>\n",
              "      <td>1909.578125</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10002</th>\n",
              "      <td>54440316</td>\n",
              "      <td>1610.566895</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10003</th>\n",
              "      <td>54429761</td>\n",
              "      <td>1418.218506</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10004 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9f058916-fc2f-4c18-ab50-dc9ec1b18eec')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9f058916-fc2f-4c18-ab50-dc9ec1b18eec button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9f058916-fc2f-4c18-ab50-dc9ec1b18eec');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-7d88f6dc-86bf-4aeb-b0ed-40eeaf587c5c\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7d88f6dc-86bf-4aeb-b0ed-40eeaf587c5c')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-7d88f6dc-86bf-4aeb-b0ed-40eeaf587c5c button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"show_query(query2)\",\n  \"rows\": 10004,\n  \"fields\": [\n    {\n      \"column\": \"neo_reference_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10004,\n        \"samples\": [\n          \"54245563\",\n          \"3785931\",\n          \"54429477\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_velocity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24302.52970343645,\n        \"min\": 1418.218505859375,\n        \"max\": 190513.421875,\n        \"num_unique_values\": 9942,\n        \"samples\": [\n          21595.21875,\n          34158.69140625,\n          26579.65011160714\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "query2 = '''\n",
        "SELECT neo_reference_id, AVG(relative_velocity_kmph) AS avg_velocity\n",
        "FROM close_approach\n",
        "GROUP BY neo_reference_id\n",
        "ORDER BY avg_velocity DESC\n",
        "'''\n",
        "show_query(query2)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 417
        },
        "id": "klh36_-ocaNB",
        "outputId": "71d70a47-e825-45d2-b27b-4899aad469f1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-55-2685788363.py:2: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
            "  df = pd.read_sql(query, con=conn)  # Use pandas read_sql\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  neo_reference_id  max_velocity\n",
              "0         54277079     190513.42\n",
              "1          2504181     186135.89\n",
              "2         54392072     173071.83\n",
              "3         54239841     162470.75\n",
              "4          3803884     161520.89\n",
              "5         54203006     160284.92\n",
              "6          3790060     158279.86\n",
              "7          3425295     154336.40\n",
              "8          3092220     152218.22\n",
              "9          3588900     151520.39"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d281e83e-3abb-4b47-9c6d-de1dc97706d5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>neo_reference_id</th>\n",
              "      <th>max_velocity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>54277079</td>\n",
              "      <td>190513.42</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2504181</td>\n",
              "      <td>186135.89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>54392072</td>\n",
              "      <td>173071.83</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>54239841</td>\n",
              "      <td>162470.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3803884</td>\n",
              "      <td>161520.89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>54203006</td>\n",
              "      <td>160284.92</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>3790060</td>\n",
              "      <td>158279.86</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>3425295</td>\n",
              "      <td>154336.40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>3092220</td>\n",
              "      <td>152218.22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>3588900</td>\n",
              "      <td>151520.39</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d281e83e-3abb-4b47-9c6d-de1dc97706d5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d281e83e-3abb-4b47-9c6d-de1dc97706d5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d281e83e-3abb-4b47-9c6d-de1dc97706d5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-ed1338ac-bb4e-453d-84d5-a0cd6c618942\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ed1338ac-bb4e-453d-84d5-a0cd6c618942')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-ed1338ac-bb4e-453d-84d5-a0cd6c618942 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"show_query(query3)\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"neo_reference_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"3092220\",\n          \"2504181\",\n          \"54203006\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"max_velocity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13773.897128014001,\n        \"min\": 151520.39,\n        \"max\": 190513.42,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          152218.22,\n          186135.89,\n          160284.92\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "query3 = '''\n",
        "SELECT neo_reference_id, MAX(relative_velocity_kmph) AS max_velocity\n",
        "FROM close_approach\n",
        "GROUP BY neo_reference_id\n",
        "ORDER BY max_velocity DESC\n",
        "LIMIT 10\n",
        "'''\n",
        "show_query(query3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        },
        "id": "MQW7LTIncksZ",
        "outputId": "effdc0e7-0f5e-4e34-b65c-3af46d6695e8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-55-2685788363.py:2: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
            "  df = pd.read_sql(query, con=conn)  # Use pandas read_sql\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "    neo_reference_id  approach_count\n",
              "0            2374158               6\n",
              "1           54427937               4\n",
              "2           54420626               4\n",
              "3            3726791               4\n",
              "4            3581669               8\n",
              "..               ...             ...\n",
              "215          3837682               6\n",
              "216          2138175               5\n",
              "217          3596491               4\n",
              "218         54049356               4\n",
              "219         54465219               6\n",
              "\n",
              "[220 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4506fb37-5c8f-4215-8790-e0d373b40d20\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>neo_reference_id</th>\n",
              "      <th>approach_count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2374158</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>54427937</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>54420626</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3726791</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3581669</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>215</th>\n",
              "      <td>3837682</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>216</th>\n",
              "      <td>2138175</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>217</th>\n",
              "      <td>3596491</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>218</th>\n",
              "      <td>54049356</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>219</th>\n",
              "      <td>54465219</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>220 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4506fb37-5c8f-4215-8790-e0d373b40d20')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4506fb37-5c8f-4215-8790-e0d373b40d20 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4506fb37-5c8f-4215-8790-e0d373b40d20');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-dee41f2f-4bcf-4c41-88c4-89cc1bd486e4\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dee41f2f-4bcf-4c41-88c4-89cc1bd486e4')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-dee41f2f-4bcf-4c41-88c4-89cc1bd486e4 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"show_query(query4)\",\n  \"rows\": 220,\n  \"fields\": [\n    {\n      \"column\": \"neo_reference_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 220,\n        \"samples\": [\n          \"3177177\",\n          \"2163026\",\n          \"3989285\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"approach_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 4,\n        \"max\": 14,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          12,\n          4,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "query4 = '''\n",
        "SELECT ca.neo_reference_id, COUNT(*) AS approach_count\n",
        "FROM close_approach ca\n",
        "JOIN asteroids a ON ca.neo_reference_id = a.id\n",
        "WHERE a.is_potentially_hazardous_asteroid = 1\n",
        "GROUP BY ca.neo_reference_id\n",
        "HAVING COUNT(*) > 3\n",
        "'''\n",
        "show_query(query4)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 135
        },
        "id": "ff39033c",
        "outputId": "69464af7-c9a3-4c86-b216-5b47edbfb929"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-55-2685788363.py:2: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
            "  df = pd.read_sql(query, con=conn)  # Use pandas read_sql\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "     month  count\n",
              "0  2024-10   2724"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1233bcf5-7400-40b4-aab6-ae872358bad2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>month</th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2024-10</td>\n",
              "      <td>2724</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1233bcf5-7400-40b4-aab6-ae872358bad2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1233bcf5-7400-40b4-aab6-ae872358bad2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1233bcf5-7400-40b4-aab6-ae872358bad2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"show_query(query5)\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"2024-10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 2724,\n        \"max\": 2724,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2724\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "query5 = '''\n",
        "SELECT DATE_FORMAT(close_approach_date, '%Y-%m') AS month, COUNT(*) AS count\n",
        "FROM close_approach\n",
        "GROUP BY month\n",
        "ORDER BY count DESC\n",
        "LIMIT 1\n",
        "'''\n",
        "show_query(query5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 135
        },
        "id": "EfJFZxMLbdUj",
        "outputId": "4f53b2cd-b937-46c9-bcbd-7ed04b035180"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-55-2685788363.py:2: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
            "  df = pd.read_sql(query, con=conn)  # Use pandas read_sql\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  neo_reference_id  fastest_speed\n",
              "0         54277079      190513.42"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4a47a4a8-c7d8-4cd7-957d-7b7000e1857d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>neo_reference_id</th>\n",
              "      <th>fastest_speed</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>54277079</td>\n",
              "      <td>190513.42</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4a47a4a8-c7d8-4cd7-957d-7b7000e1857d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4a47a4a8-c7d8-4cd7-957d-7b7000e1857d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4a47a4a8-c7d8-4cd7-957d-7b7000e1857d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"show_query(query6)\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"neo_reference_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"54277079\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fastest_speed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 190513.42,\n        \"max\": 190513.42,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          190513.42\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "query6 = '''\n",
        "SELECT neo_reference_id, relative_velocity_kmph AS fastest_speed\n",
        "FROM close_approach\n",
        "ORDER BY relative_velocity_kmph DESC\n",
        "LIMIT 1\n",
        "'''\n",
        "show_query(query6)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1e925341"
      },
      "outputs": [],
      "source": [
        "conn = mysql.connector.connect(host=\"gateway01.eu-central-1.prod.aws.tidbcloud.com\",\n",
        "                               user=\"Tf6RqboHNPV8kyH.root\",\n",
        "                               password=\"fn8OtaiwT8YNm99R\",\n",
        "                               port = 4000,\n",
        "                               database = \"Nasa\") # Connect to the 'Nasa' database\n",
        "cursor = conn.cursor() # Re-create the cursor after connecting to the database"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "43fe6cf1"
      },
      "outputs": [],
      "source": [
        "def show_query(query):\n",
        "    df = pd.read_sql(query, con=conn)  # Use pandas read_sql\n",
        "    display(df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        },
        "id": "oneLN6fBc3xc",
        "outputId": "14675f21-683b-4511-8e1c-84aea8613be6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-55-2685788363.py:2: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
            "  df = pd.read_sql(query, con=conn)  # Use pandas read_sql\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "             id                  name  estimated_diameter_max_km\n",
              "0       2000433    433 Eros (A898 PA)                  49.435620\n",
              "1       2000887  887 Alinda (A918 AA)                  10.233872\n",
              "2       2001685   1685 Toro (1948 OA)                   8.280184\n",
              "3       2066146      66146 (1998 TU3)                   7.980681\n",
              "4       2138205   138205 (2000 EZ148)                   5.754929\n",
              "...         ...                   ...                        ...\n",
              "9999    3556206            (2011 CQ1)                   0.002260\n",
              "10000  54511953            (2024 YW8)                   0.002208\n",
              "10001  54380194             (2023 RS)                   0.002042\n",
              "10002  54473959           (2024 RC42)                   0.001986\n",
              "10003  54496614            (2024 UG9)                   0.001787\n",
              "\n",
              "[10004 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cc0d7899-83eb-4f17-9c4c-167994c5d1bb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>name</th>\n",
              "      <th>estimated_diameter_max_km</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2000433</td>\n",
              "      <td>433 Eros (A898 PA)</td>\n",
              "      <td>49.435620</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2000887</td>\n",
              "      <td>887 Alinda (A918 AA)</td>\n",
              "      <td>10.233872</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2001685</td>\n",
              "      <td>1685 Toro (1948 OA)</td>\n",
              "      <td>8.280184</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2066146</td>\n",
              "      <td>66146 (1998 TU3)</td>\n",
              "      <td>7.980681</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2138205</td>\n",
              "      <td>138205 (2000 EZ148)</td>\n",
              "      <td>5.754929</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9999</th>\n",
              "      <td>3556206</td>\n",
              "      <td>(2011 CQ1)</td>\n",
              "      <td>0.002260</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10000</th>\n",
              "      <td>54511953</td>\n",
              "      <td>(2024 YW8)</td>\n",
              "      <td>0.002208</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10001</th>\n",
              "      <td>54380194</td>\n",
              "      <td>(2023 RS)</td>\n",
              "      <td>0.002042</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10002</th>\n",
              "      <td>54473959</td>\n",
              "      <td>(2024 RC42)</td>\n",
              "      <td>0.001986</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10003</th>\n",
              "      <td>54496614</td>\n",
              "      <td>(2024 UG9)</td>\n",
              "      <td>0.001787</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10004 rows × 3 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cc0d7899-83eb-4f17-9c4c-167994c5d1bb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cc0d7899-83eb-4f17-9c4c-167994c5d1bb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cc0d7899-83eb-4f17-9c4c-167994c5d1bb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-940b035b-babb-4bd5-8e90-b55a1d0d9e72\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-940b035b-babb-4bd5-8e90-b55a1d0d9e72')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-940b035b-babb-4bd5-8e90-b55a1d0d9e72 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"show_query(query7)\",\n  \"rows\": 10004,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24400039,\n        \"min\": 2000433,\n        \"max\": 54538217,\n        \"num_unique_values\": 10004,\n        \"samples\": [\n          54310914,\n          54433333,\n          3578689\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10004,\n        \"samples\": [\n          \"(2022 SK37)\",\n          \"(2024 GG2)\",\n          \"(2011 ST12)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"estimated_diameter_max_km\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.595323522541214,\n        \"min\": 0.001786652,\n        \"max\": 49.43562,\n        \"num_unique_values\": 1323,\n        \"samples\": [\n          0.07345815,\n          0.20798881,\n          0.6138185\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "query7 = '''\n",
        "SELECT id, name, estimated_diameter_max_km\n",
        "FROM asteroids\n",
        "ORDER BY estimated_diameter_max_km DESC\n",
        "'''\n",
        "show_query(query7)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        },
        "id": "POLuPQkMQmXR",
        "outputId": "199daa75-1741-4519-ee82-33fe4af266f1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-55-2685788363.py:2: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
            "  df = pd.read_sql(query, con=conn)  # Use pandas read_sql\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "          id neo_reference_id close_approach_date  relative_velocity_kmph  \\\n",
              "0      44827          2000433          2025-11-30               13423.863   \n",
              "1      72919          2000433          2025-11-30               13423.863   \n",
              "2      39924          2000887          2025-01-08               29695.316   \n",
              "3       8021          2000887          2025-01-08               29695.316   \n",
              "4      68016          2000887          2025-01-08               29695.316   \n",
              "...      ...              ...                 ...                     ...   \n",
              "41495  70674         54538215          2025-06-02               26442.670   \n",
              "41496  43092         54538216          2025-07-10               49753.470   \n",
              "41497  71184         54538216          2025-07-10               49753.470   \n",
              "41498  43075         54538217          2025-07-11               43181.210   \n",
              "41499  71167         54538217          2025-07-11               43181.210   \n",
              "\n",
              "       astronomical  miss_distance_km  miss_distance_lunar orbiting_body  \n",
              "0          0.397647        59487216.0           154.684860         Earth  \n",
              "1          0.397647        59487216.0           154.684860         Earth  \n",
              "2          0.082198        12296605.0            31.974916         Earth  \n",
              "3          0.082198        12296605.0            31.974916         Earth  \n",
              "4          0.082198        12296605.0            31.974916         Earth  \n",
              "...             ...               ...                  ...           ...  \n",
              "41495      0.111039        16611230.0            43.194252         Earth  \n",
              "41496      0.021654         3239406.5             8.423443         Earth  \n",
              "41497      0.021654         3239406.5             8.423443         Earth  \n",
              "41498      0.002858          427532.3             1.111714         Earth  \n",
              "41499      0.002858          427532.3             1.111714         Earth  \n",
              "\n",
              "[41500 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-16479398-41bd-492f-8ca0-0783a55e91e3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>neo_reference_id</th>\n",
              "      <th>close_approach_date</th>\n",
              "      <th>relative_velocity_kmph</th>\n",
              "      <th>astronomical</th>\n",
              "      <th>miss_distance_km</th>\n",
              "      <th>miss_distance_lunar</th>\n",
              "      <th>orbiting_body</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>44827</td>\n",
              "      <td>2000433</td>\n",
              "      <td>2025-11-30</td>\n",
              "      <td>13423.863</td>\n",
              "      <td>0.397647</td>\n",
              "      <td>59487216.0</td>\n",
              "      <td>154.684860</td>\n",
              "      <td>Earth</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>72919</td>\n",
              "      <td>2000433</td>\n",
              "      <td>2025-11-30</td>\n",
              "      <td>13423.863</td>\n",
              "      <td>0.397647</td>\n",
              "      <td>59487216.0</td>\n",
              "      <td>154.684860</td>\n",
              "      <td>Earth</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>39924</td>\n",
              "      <td>2000887</td>\n",
              "      <td>2025-01-08</td>\n",
              "      <td>29695.316</td>\n",
              "      <td>0.082198</td>\n",
              "      <td>12296605.0</td>\n",
              "      <td>31.974916</td>\n",
              "      <td>Earth</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>8021</td>\n",
              "      <td>2000887</td>\n",
              "      <td>2025-01-08</td>\n",
              "      <td>29695.316</td>\n",
              "      <td>0.082198</td>\n",
              "      <td>12296605.0</td>\n",
              "      <td>31.974916</td>\n",
              "      <td>Earth</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>68016</td>\n",
              "      <td>2000887</td>\n",
              "      <td>2025-01-08</td>\n",
              "      <td>29695.316</td>\n",
              "      <td>0.082198</td>\n",
              "      <td>12296605.0</td>\n",
              "      <td>31.974916</td>\n",
              "      <td>Earth</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41495</th>\n",
              "      <td>70674</td>\n",
              "      <td>54538215</td>\n",
              "      <td>2025-06-02</td>\n",
              "      <td>26442.670</td>\n",
              "      <td>0.111039</td>\n",
              "      <td>16611230.0</td>\n",
              "      <td>43.194252</td>\n",
              "      <td>Earth</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41496</th>\n",
              "      <td>43092</td>\n",
              "      <td>54538216</td>\n",
              "      <td>2025-07-10</td>\n",
              "      <td>49753.470</td>\n",
              "      <td>0.021654</td>\n",
              "      <td>3239406.5</td>\n",
              "      <td>8.423443</td>\n",
              "      <td>Earth</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41497</th>\n",
              "      <td>71184</td>\n",
              "      <td>54538216</td>\n",
              "      <td>2025-07-10</td>\n",
              "      <td>49753.470</td>\n",
              "      <td>0.021654</td>\n",
              "      <td>3239406.5</td>\n",
              "      <td>8.423443</td>\n",
              "      <td>Earth</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41498</th>\n",
              "      <td>43075</td>\n",
              "      <td>54538217</td>\n",
              "      <td>2025-07-11</td>\n",
              "      <td>43181.210</td>\n",
              "      <td>0.002858</td>\n",
              "      <td>427532.3</td>\n",
              "      <td>1.111714</td>\n",
              "      <td>Earth</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41499</th>\n",
              "      <td>71167</td>\n",
              "      <td>54538217</td>\n",
              "      <td>2025-07-11</td>\n",
              "      <td>43181.210</td>\n",
              "      <td>0.002858</td>\n",
              "      <td>427532.3</td>\n",
              "      <td>1.111714</td>\n",
              "      <td>Earth</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>41500 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-16479398-41bd-492f-8ca0-0783a55e91e3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-16479398-41bd-492f-8ca0-0783a55e91e3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-16479398-41bd-492f-8ca0-0783a55e91e3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-7eb48a88-17dc-40e5-96d3-272b51d81598\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7eb48a88-17dc-40e5-96d3-272b51d81598')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-7eb48a88-17dc-40e5-96d3-272b51d81598 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"show_query(query8)\",\n  \"rows\": 41500,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24110,\n        \"min\": 1,\n        \"max\": 74796,\n        \"num_unique_values\": 41500,\n        \"samples\": [\n          686,\n          40208,\n          39389\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"neo_reference_id\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10004,\n        \"samples\": [\n          \"3799640\",\n          \"54177599\",\n          \"54483143\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"close_approach_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2024-01-01\",\n        \"max\": \"2026-05-11\",\n        \"num_unique_values\": 859,\n        \"samples\": [\n          \"2025-01-20\",\n          \"2025-01-15\",\n          \"2025-04-23\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"relative_velocity_kmph\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24154.44257654231,\n        \"min\": 1418.2185,\n        \"max\": 190513.42,\n        \"num_unique_values\": 12858,\n        \"samples\": [\n          46715.574,\n          47353.76,\n          52700.715\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"astronomical\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1551471997342278,\n        \"min\": 5.16453e-05,\n        \"max\": 0.49995157,\n        \"num_unique_values\": 12860,\n        \"samples\": [\n          0.29769772,\n          0.3704538,\n          0.13934155\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"miss_distance_km\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23209690.6161439,\n        \"min\": 7726.027,\n        \"max\": 74791690.0,\n        \"num_unique_values\": 12857,\n        \"samples\": [\n          47357424.0,\n          57281660.0,\n          8183512.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"miss_distance_lunar\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 60.352260680052844,\n        \"min\": 0.020090021,\n        \"max\": 194.48116,\n        \"num_unique_values\": 12863,\n        \"samples\": [\n          45.718357,\n          29.599823,\n          35.381058\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"orbiting_body\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Earth\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "query8 = '''\n",
        "SELECT *\n",
        "FROM close_approach\n",
        "ORDER BY neo_reference_id, close_approach_date\n",
        "'''\n",
        "show_query(query8)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        },
        "id": "lERFB5q2Q2Oy",
        "outputId": "cee46682-a270-47b4-9f01-d57d1b20461d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-55-2685788363.py:2: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
            "  df = pd.read_sql(query, con=conn)  # Use pandas read_sql\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "               name  closest_approach\n",
              "0         (2024 XA)      7.726027e+03\n",
              "1        (2024 LH1)      8.098256e+03\n",
              "2        (2024 UG9)      8.849866e+03\n",
              "3        (2025 BP6)      9.711953e+03\n",
              "4         (2024 HA)      1.555513e+04\n",
              "...             ...               ...\n",
              "9999      (2020 YH)      7.477857e+07\n",
              "10000     (2023 GF)      7.478050e+07\n",
              "10001    (2022 QQ3)      7.478338e+07\n",
              "10002    (2021 UQ3)      7.478990e+07\n",
              "10003  (2014 HL129)      7.479169e+07\n",
              "\n",
              "[10004 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0d7306a5-6f3b-48a8-b729-5ac0a95b99dd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>closest_approach</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>(2024 XA)</td>\n",
              "      <td>7.726027e+03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>(2024 LH1)</td>\n",
              "      <td>8.098256e+03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>(2024 UG9)</td>\n",
              "      <td>8.849866e+03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>(2025 BP6)</td>\n",
              "      <td>9.711953e+03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>(2024 HA)</td>\n",
              "      <td>1.555513e+04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9999</th>\n",
              "      <td>(2020 YH)</td>\n",
              "      <td>7.477857e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10000</th>\n",
              "      <td>(2023 GF)</td>\n",
              "      <td>7.478050e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10001</th>\n",
              "      <td>(2022 QQ3)</td>\n",
              "      <td>7.478338e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10002</th>\n",
              "      <td>(2021 UQ3)</td>\n",
              "      <td>7.478990e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10003</th>\n",
              "      <td>(2014 HL129)</td>\n",
              "      <td>7.479169e+07</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10004 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0d7306a5-6f3b-48a8-b729-5ac0a95b99dd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0d7306a5-6f3b-48a8-b729-5ac0a95b99dd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0d7306a5-6f3b-48a8-b729-5ac0a95b99dd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-f11550ba-58ce-4839-abaf-45a8a5cc97de\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f11550ba-58ce-4839-abaf-45a8a5cc97de')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-f11550ba-58ce-4839-abaf-45a8a5cc97de button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"show_query(query9)\",\n  \"rows\": 10004,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10004,\n        \"samples\": [\n          \"(2017 FK)\",\n          \"(2025 DC2)\",\n          \"(2016 RL17)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"closest_approach\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22543495.332886428,\n        \"min\": 7726.027,\n        \"max\": 74791690.0,\n        \"num_unique_values\": 9938,\n        \"samples\": [\n          72696220.0,\n          58427100.0,\n          3860974.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "query9 = '''\n",
        "SELECT a.name, MIN(ca.miss_distance_km) AS closest_approach\n",
        "FROM close_approach ca\n",
        "JOIN asteroids a ON ca.neo_reference_id = a.id\n",
        "GROUP BY a.id\n",
        "ORDER BY closest_approach ASC\n",
        "'''\n",
        "show_query(query9)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        },
        "id": "uFfm72eoRUo_",
        "outputId": "e252830e-9b22-448e-a627-8c3c973015f0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-55-2685788363.py:2: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
            "  df = pd.read_sql(query, con=conn)  # Use pandas read_sql\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "             name  relative_velocity_kmph\n",
              "0      (2010 BK2)               81305.370\n",
              "1     (2005 BH14)               62818.316\n",
              "2      (2024 CA7)              117005.430\n",
              "3      (2018 CY2)               54740.950\n",
              "4      (2021 RS2)               65896.080\n",
              "...           ...                     ...\n",
              "4881  (2016 BP14)               62467.710\n",
              "4882    (2020 OH)               61730.790\n",
              "4883   (2020 UO4)               59552.195\n",
              "4884    (2018 DJ)              101393.670\n",
              "4885   (2017 FN1)               64586.273\n",
              "\n",
              "[4886 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-af6a2383-0ac5-4cfd-9796-0244a695eab5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>relative_velocity_kmph</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>(2010 BK2)</td>\n",
              "      <td>81305.370</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>(2005 BH14)</td>\n",
              "      <td>62818.316</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>(2024 CA7)</td>\n",
              "      <td>117005.430</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>(2018 CY2)</td>\n",
              "      <td>54740.950</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>(2021 RS2)</td>\n",
              "      <td>65896.080</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4881</th>\n",
              "      <td>(2016 BP14)</td>\n",
              "      <td>62467.710</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4882</th>\n",
              "      <td>(2020 OH)</td>\n",
              "      <td>61730.790</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4883</th>\n",
              "      <td>(2020 UO4)</td>\n",
              "      <td>59552.195</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4884</th>\n",
              "      <td>(2018 DJ)</td>\n",
              "      <td>101393.670</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4885</th>\n",
              "      <td>(2017 FN1)</td>\n",
              "      <td>64586.273</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4886 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-af6a2383-0ac5-4cfd-9796-0244a695eab5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-af6a2383-0ac5-4cfd-9796-0244a695eab5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-af6a2383-0ac5-4cfd-9796-0244a695eab5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-58f021bc-1a12-434e-886f-af8066d77c8e\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-58f021bc-1a12-434e-886f-af8066d77c8e')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-58f021bc-1a12-434e-886f-af8066d77c8e button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"show_query(query10)\",\n  \"rows\": 4886,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4321,\n        \"samples\": [\n          \"(2022 YW1)\",\n          \"(2023 VK2)\",\n          \"(2016 ED)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"relative_velocity_kmph\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18228.76629228628,\n        \"min\": 50010.344,\n        \"max\": 190513.42,\n        \"num_unique_values\": 4847,\n        \"samples\": [\n          66106.07,\n          65628.98,\n          74844.23\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "query10 = '''\n",
        "SELECT DISTINCT a.name, ca.relative_velocity_kmph\n",
        "FROM close_approach ca\n",
        "JOIN asteroids a ON ca.neo_reference_id = a.id\n",
        "WHERE ca.relative_velocity_kmph > 50000\n",
        "'''\n",
        "show_query(query10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "0Bz8q_l2RYfB",
        "outputId": "3c972c77-4cd4-4e04-bbd7-29e9471c4786"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-55-2685788363.py:2: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
            "  df = pd.read_sql(query, con=conn)  # Use pandas read_sql\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "      month  total\n",
              "0   2024-10   2724\n",
              "1   2024-03   2545\n",
              "2   2024-09   2523\n",
              "3   2024-01   2510\n",
              "4   2024-02   2478\n",
              "5   2024-04   2161\n",
              "6   2024-12   2079\n",
              "7   2024-11   2020\n",
              "8   2025-03   1866\n",
              "9   2024-08   1773\n",
              "10  2024-05   1689\n",
              "11  2025-02   1686\n",
              "12  2025-01   1668\n",
              "13  2025-04   1559\n",
              "14  2024-06   1482\n",
              "15  2024-07   1413\n",
              "16  2025-05   1014\n",
              "17  2025-06    846\n",
              "18  2025-10    828\n",
              "19  2026-03    812\n",
              "20  2025-11    758\n",
              "21  2025-09    738\n",
              "22  2025-12    734\n",
              "23  2025-07    726\n",
              "24  2026-04    698\n",
              "25  2026-01    680\n",
              "26  2025-08    672\n",
              "27  2026-02    648\n",
              "28  2026-05    170"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b5a42290-1a12-41a5-bd40-3f4924aea3e2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>month</th>\n",
              "      <th>total</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2024-10</td>\n",
              "      <td>2724</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2024-03</td>\n",
              "      <td>2545</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2024-09</td>\n",
              "      <td>2523</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2024-01</td>\n",
              "      <td>2510</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2024-02</td>\n",
              "      <td>2478</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2024-04</td>\n",
              "      <td>2161</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2024-12</td>\n",
              "      <td>2079</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2024-11</td>\n",
              "      <td>2020</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>2025-03</td>\n",
              "      <td>1866</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2024-08</td>\n",
              "      <td>1773</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>2024-05</td>\n",
              "      <td>1689</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>2025-02</td>\n",
              "      <td>1686</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>2025-01</td>\n",
              "      <td>1668</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>2025-04</td>\n",
              "      <td>1559</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>2024-06</td>\n",
              "      <td>1482</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>2024-07</td>\n",
              "      <td>1413</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>2025-05</td>\n",
              "      <td>1014</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>2025-06</td>\n",
              "      <td>846</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>2025-10</td>\n",
              "      <td>828</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>2026-03</td>\n",
              "      <td>812</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>2025-11</td>\n",
              "      <td>758</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>2025-09</td>\n",
              "      <td>738</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>2025-12</td>\n",
              "      <td>734</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>2025-07</td>\n",
              "      <td>726</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>2026-04</td>\n",
              "      <td>698</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>2026-01</td>\n",
              "      <td>680</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>2025-08</td>\n",
              "      <td>672</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>2026-02</td>\n",
              "      <td>648</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>2026-05</td>\n",
              "      <td>170</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b5a42290-1a12-41a5-bd40-3f4924aea3e2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b5a42290-1a12-41a5-bd40-3f4924aea3e2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b5a42290-1a12-41a5-bd40-3f4924aea3e2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-47936d8f-a311-4a90-b580-19ef0dd34ec0\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-47936d8f-a311-4a90-b580-19ef0dd34ec0')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-47936d8f-a311-4a90-b580-19ef0dd34ec0 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"show_query(query11)\",\n  \"rows\": 29,\n  \"fields\": [\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 29,\n        \"samples\": [\n          \"2026-02\",\n          \"2025-05\",\n          \"2025-01\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 737,\n        \"min\": 170,\n        \"max\": 2724,\n        \"num_unique_values\": 29,\n        \"samples\": [\n          648,\n          1014,\n          1668\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "query11 = '''\n",
        "SELECT DATE_FORMAT(close_approach_date, '%Y-%m') AS month, COUNT(*) AS total\n",
        "FROM close_approach\n",
        "GROUP BY month\n",
        "ORDER BY total DESC\n",
        "'''\n",
        "show_query(query11)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 135
        },
        "id": "KKqqKSjWRysx",
        "outputId": "daf82224-6fb9-4737-9442-d55dfc811ae2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-55-2685788363.py:2: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
            "  df = pd.read_sql(query, con=conn)  # Use pandas read_sql\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "        id                name  absolute_magnitude_h\n",
              "0  2000433  433 Eros (A898 PA)                  10.4"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7b23d5c3-6810-4976-93cf-ff8814f36624\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>name</th>\n",
              "      <th>absolute_magnitude_h</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2000433</td>\n",
              "      <td>433 Eros (A898 PA)</td>\n",
              "      <td>10.4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7b23d5c3-6810-4976-93cf-ff8814f36624')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7b23d5c3-6810-4976-93cf-ff8814f36624 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7b23d5c3-6810-4976-93cf-ff8814f36624');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"show_query(query12)\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 2000433,\n        \"max\": 2000433,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2000433\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"433 Eros (A898 PA)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"absolute_magnitude_h\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 10.4,\n        \"max\": 10.4,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          10.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "query12 = '''\n",
        "SELECT id, name, absolute_magnitude_h\n",
        "FROM asteroids\n",
        "ORDER BY absolute_magnitude_h ASC\n",
        "LIMIT 1\n",
        "'''\n",
        "show_query(query12)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 166
        },
        "id": "joWsOlwWR00Z",
        "outputId": "d632970b-99f0-4482-838a-c6ac0a168fd7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-55-2685788363.py:2: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
            "  df = pd.read_sql(query, con=conn)  # Use pandas read_sql\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   is_potentially_hazardous_asteroid  count\n",
              "0                                  1    616\n",
              "1                                  0   9388"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cec4017b-c844-4c38-bafd-c7bb8037fef5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>is_potentially_hazardous_asteroid</th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>616</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>9388</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cec4017b-c844-4c38-bafd-c7bb8037fef5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cec4017b-c844-4c38-bafd-c7bb8037fef5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cec4017b-c844-4c38-bafd-c7bb8037fef5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-9f7c9062-eaa1-4af5-be02-827024f09d1f\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9f7c9062-eaa1-4af5-be02-827024f09d1f')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-9f7c9062-eaa1-4af5-be02-827024f09d1f button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"show_query(query13)\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"is_potentially_hazardous_asteroid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6202,\n        \"min\": 616,\n        \"max\": 9388,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          9388,\n          616\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "query13 = '''\n",
        "SELECT is_potentially_hazardous_asteroid, COUNT(*) AS count\n",
        "FROM asteroids\n",
        "GROUP BY is_potentially_hazardous_asteroid\n",
        "'''\n",
        "show_query(query13)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        },
        "id": "8iVqaru3R4tY",
        "outputId": "ff8fd118-3e0e-4861-c80f-167c5ddc5400"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-55-2685788363.py:2: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
            "  df = pd.read_sql(query, con=conn)  # Use pandas read_sql\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "           name close_approach_date  miss_distance_lunar\n",
              "0     (2024 XA)          2024-12-01             0.020090\n",
              "1     (2024 XA)          2024-12-01             0.020090\n",
              "2     (2024 XA)          2024-12-01             0.020090\n",
              "3    (2024 LH1)          2024-06-06             0.021058\n",
              "4    (2024 LH1)          2024-06-06             0.021058\n",
              "..          ...                 ...                  ...\n",
              "791  (2024 RR8)          2024-09-02             0.979981\n",
              "792  (2024 RR8)          2024-09-02             0.979981\n",
              "793   (2024 XK)          2024-12-01             0.992386\n",
              "794   (2024 XK)          2024-12-01             0.992386\n",
              "795   (2024 XK)          2024-12-01             0.992386\n",
              "\n",
              "[796 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-346b2203-a053-42b8-8a93-97e08f78931f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>close_approach_date</th>\n",
              "      <th>miss_distance_lunar</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>(2024 XA)</td>\n",
              "      <td>2024-12-01</td>\n",
              "      <td>0.020090</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>(2024 XA)</td>\n",
              "      <td>2024-12-01</td>\n",
              "      <td>0.020090</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>(2024 XA)</td>\n",
              "      <td>2024-12-01</td>\n",
              "      <td>0.020090</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>(2024 LH1)</td>\n",
              "      <td>2024-06-06</td>\n",
              "      <td>0.021058</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>(2024 LH1)</td>\n",
              "      <td>2024-06-06</td>\n",
              "      <td>0.021058</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>791</th>\n",
              "      <td>(2024 RR8)</td>\n",
              "      <td>2024-09-02</td>\n",
              "      <td>0.979981</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>792</th>\n",
              "      <td>(2024 RR8)</td>\n",
              "      <td>2024-09-02</td>\n",
              "      <td>0.979981</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>793</th>\n",
              "      <td>(2024 XK)</td>\n",
              "      <td>2024-12-01</td>\n",
              "      <td>0.992386</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>794</th>\n",
              "      <td>(2024 XK)</td>\n",
              "      <td>2024-12-01</td>\n",
              "      <td>0.992386</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>795</th>\n",
              "      <td>(2024 XK)</td>\n",
              "      <td>2024-12-01</td>\n",
              "      <td>0.992386</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>796 rows × 3 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-346b2203-a053-42b8-8a93-97e08f78931f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-346b2203-a053-42b8-8a93-97e08f78931f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-346b2203-a053-42b8-8a93-97e08f78931f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-5cdd66b2-d5c4-4e06-876a-b54d00cb3152\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5cdd66b2-d5c4-4e06-876a-b54d00cb3152')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-5cdd66b2-d5c4-4e06-876a-b54d00cb3152 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"show_query(query14)\",\n  \"rows\": 796,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 223,\n        \"samples\": [\n          \"(2024 JN16)\",\n          \"(2025 LB)\",\n          \"(2025 LD1)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"close_approach_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2024-01-04\",\n        \"max\": \"2026-04-14\",\n        \"num_unique_values\": 170,\n        \"samples\": [\n          \"2025-02-21\",\n          \"2024-04-15\",\n          \"2026-04-14\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"miss_distance_lunar\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2842685247878263,\n        \"min\": 0.020090021,\n        \"max\": 0.9923856,\n        \"num_unique_values\": 223,\n        \"samples\": [\n          0.064948216,\n          0.39525664,\n          0.54800946\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "query14 = '''\n",
        "SELECT a.name, ca.close_approach_date, ca.miss_distance_lunar\n",
        "FROM close_approach ca\n",
        "JOIN asteroids a ON ca.neo_reference_id = a.id\n",
        "WHERE ca.miss_distance_lunar < 1\n",
        "ORDER BY ca.miss_distance_lunar\n",
        "'''\n",
        "show_query(query14)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        },
        "id": "EJLsEegIR_1N",
        "outputId": "b94fad8d-fa2f-4f86-8d6e-98a16134fbd1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-55-2685788363.py:2: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
            "  df = pd.read_sql(query, con=conn)  # Use pandas read_sql\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "            name close_approach_date  astronomical\n",
              "0      (2024 XA)          2024-12-01      0.000052\n",
              "1      (2024 XA)          2024-12-01      0.000052\n",
              "2      (2024 XA)          2024-12-01      0.000052\n",
              "3     (2024 LH1)          2024-06-06      0.000054\n",
              "4     (2024 LH1)          2024-06-06      0.000054\n",
              "...          ...                 ...           ...\n",
              "8794  (2010 WR7)          2025-12-20      0.049958\n",
              "8795  (2010 WR7)          2025-12-20      0.049958\n",
              "8796  (2012 HF2)          2025-04-16      0.049992\n",
              "8797  (2012 HF2)          2025-04-16      0.049992\n",
              "8798  (2012 HF2)          2025-04-16      0.049992\n",
              "\n",
              "[8799 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-57a542cf-870e-4762-b205-a8e8c8fc355f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>close_approach_date</th>\n",
              "      <th>astronomical</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>(2024 XA)</td>\n",
              "      <td>2024-12-01</td>\n",
              "      <td>0.000052</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>(2024 XA)</td>\n",
              "      <td>2024-12-01</td>\n",
              "      <td>0.000052</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>(2024 XA)</td>\n",
              "      <td>2024-12-01</td>\n",
              "      <td>0.000052</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>(2024 LH1)</td>\n",
              "      <td>2024-06-06</td>\n",
              "      <td>0.000054</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>(2024 LH1)</td>\n",
              "      <td>2024-06-06</td>\n",
              "      <td>0.000054</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8794</th>\n",
              "      <td>(2010 WR7)</td>\n",
              "      <td>2025-12-20</td>\n",
              "      <td>0.049958</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8795</th>\n",
              "      <td>(2010 WR7)</td>\n",
              "      <td>2025-12-20</td>\n",
              "      <td>0.049958</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8796</th>\n",
              "      <td>(2012 HF2)</td>\n",
              "      <td>2025-04-16</td>\n",
              "      <td>0.049992</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8797</th>\n",
              "      <td>(2012 HF2)</td>\n",
              "      <td>2025-04-16</td>\n",
              "      <td>0.049992</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8798</th>\n",
              "      <td>(2012 HF2)</td>\n",
              "      <td>2025-04-16</td>\n",
              "      <td>0.049992</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8799 rows × 3 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-57a542cf-870e-4762-b205-a8e8c8fc355f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-57a542cf-870e-4762-b205-a8e8c8fc355f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-57a542cf-870e-4762-b205-a8e8c8fc355f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-47813416-c387-4528-b153-9b6e2911465a\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-47813416-c387-4528-b153-9b6e2911465a')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-47813416-c387-4528-b153-9b6e2911465a button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"show_query(query15)\",\n  \"rows\": 8799,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2535,\n        \"samples\": [\n          \"(2025 EZ)\",\n          \"(2022 EZ6)\",\n          \"(2024 XA17)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"close_approach_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2024-01-01\",\n        \"max\": \"2026-05-09\",\n        \"num_unique_values\": 629,\n        \"samples\": [\n          \"2026-03-11\",\n          \"2025-01-16\",\n          \"2026-04-10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"astronomical\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.014478322928927635,\n        \"min\": 5.16453e-05,\n        \"max\": 0.04999221,\n        \"num_unique_values\": 2561,\n        \"samples\": [\n          0.03859059,\n          0.028622832,\n          0.016906912\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "query15 = '''\n",
        "SELECT a.name, ca.close_approach_date, ca.astronomical\n",
        "FROM close_approach ca\n",
        "JOIN asteroids a ON ca.neo_reference_id = a.id\n",
        "WHERE ca.astronomical < 0.05\n",
        "ORDER BY ca.astronomical\n",
        "'''\n",
        "show_query(query15)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DveJxpc9SQM9"
      },
      "source": [
        "ADDTIONAL QUERIES"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 108
        },
        "id": "0IYSCs6CSXnF",
        "outputId": "71b3f639-eeab-489e-8c73-7968ce7bd3d4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-55-2685788363.py:2: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
            "  df = pd.read_sql(query, con=conn)  # Use pandas read_sql\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [orbiting_body, count]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-646224f6-1bcd-4a5f-8d55-95deee5d01bb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>orbiting_body</th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-646224f6-1bcd-4a5f-8d55-95deee5d01bb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-646224f6-1bcd-4a5f-8d55-95deee5d01bb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-646224f6-1bcd-4a5f-8d55-95deee5d01bb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "# 💡 ADD 1: Most frequently orbiting body (other than Earth)\n",
        "Add_1 = ''' SELECT orbiting_body, COUNT(*) AS count\n",
        "FROM close_approach\n",
        "WHERE orbiting_body != 'Earth'\n",
        "GROUP BY orbiting_body\n",
        "ORDER BY count DESC '''\n",
        "show_query(Add_1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 166
        },
        "id": "le_8BnV9Sc6N",
        "outputId": "991c3d4b-56ef-4bda-bba2-9744fab52825"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-55-2685788363.py:2: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
            "  df = pd.read_sql(query, con=conn)  # Use pandas read_sql\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   is_potentially_hazardous_asteroid  avg_miss_distance\n",
              "0                                  1       3.527033e+07\n",
              "1                                  0       3.109933e+07"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-00dc608c-a7cc-41fd-9d16-478084e5916e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>is_potentially_hazardous_asteroid</th>\n",
              "      <th>avg_miss_distance</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>3.527033e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>3.109933e+07</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-00dc608c-a7cc-41fd-9d16-478084e5916e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-00dc608c-a7cc-41fd-9d16-478084e5916e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-00dc608c-a7cc-41fd-9d16-478084e5916e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-ef3ff608-5c09-43ff-a572-f941da5760bf\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ef3ff608-5c09-43ff-a572-f941da5760bf')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-ef3ff608-5c09-43ff-a572-f941da5760bf button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"show_query(Add_2)\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"is_potentially_hazardous_asteroid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"avg_miss_distance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2949339.2320997845,\n        \"min\": 31099332.924861822,\n        \"max\": 35270328.46693639,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          31099332.924861822,\n          35270328.46693639\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "# 💡 Additional Query 2: Average miss distance by hazard type\n",
        "Add_2 = '''\n",
        "SELECT a.is_potentially_hazardous_asteroid, AVG(ca.miss_distance_km) AS avg_miss_distance\n",
        "FROM close_approach ca\n",
        "JOIN asteroids a ON ca.neo_reference_id = a.id\n",
        "GROUP BY a.is_potentially_hazardous_asteroid\n",
        "'''\n",
        "show_query(Add_2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 261
        },
        "id": "jPuNTBa2Sp-F",
        "outputId": "e8c48ee9-9547-4d12-fa28-10ea5bc1400b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-55-2685788363.py:2: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
            "  df = pd.read_sql(query, con=conn)  # Use pandas read_sql\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "         name close_approach_date  miss_distance_km\n",
              "0   (2024 XA)          2024-12-01         7726.0270\n",
              "1   (2024 XA)          2024-12-01         7726.0270\n",
              "2   (2024 XA)          2024-12-01         7726.0270\n",
              "3  (2024 LH1)          2024-06-06         8098.2563\n",
              "4  (2024 LH1)          2024-06-06         8098.2563"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e306b44f-13b8-415b-a48f-3602e2aa164e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>close_approach_date</th>\n",
              "      <th>miss_distance_km</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>(2024 XA)</td>\n",
              "      <td>2024-12-01</td>\n",
              "      <td>7726.0270</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>(2024 XA)</td>\n",
              "      <td>2024-12-01</td>\n",
              "      <td>7726.0270</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>(2024 XA)</td>\n",
              "      <td>2024-12-01</td>\n",
              "      <td>7726.0270</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>(2024 LH1)</td>\n",
              "      <td>2024-06-06</td>\n",
              "      <td>8098.2563</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>(2024 LH1)</td>\n",
              "      <td>2024-06-06</td>\n",
              "      <td>8098.2563</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e306b44f-13b8-415b-a48f-3602e2aa164e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e306b44f-13b8-415b-a48f-3602e2aa164e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e306b44f-13b8-415b-a48f-3602e2aa164e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-629e750b-112f-4d7d-86ce-22e1a40af97b\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-629e750b-112f-4d7d-86ce-22e1a40af97b')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-629e750b-112f-4d7d-86ce-22e1a40af97b button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"show_query(Add_3)\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"(2024 LH1)\",\n          \"(2024 XA)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"close_approach_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2024-06-06\",\n        \"max\": \"2024-12-01\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"2024-06-06\",\n          \"2024-12-01\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"miss_distance_km\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 203.8783841743577,\n        \"min\": 7726.027,\n        \"max\": 8098.2563,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          8098.2563,\n          7726.027\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "# 💡 Additional Query 3: Top 5 closest approaches to Earth\n",
        "Add_3 = '''\n",
        "SELECT a.name, ca.close_approach_date, ca.miss_distance_km\n",
        "FROM close_approach ca\n",
        "JOIN asteroids a ON ca.neo_reference_id = a.id\n",
        "ORDER BY ca.miss_distance_km ASC\n",
        "LIMIT 5\n",
        "'''\n",
        "show_query(Add_3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 135
        },
        "id": "r9YHUz_VS1Ta",
        "outputId": "0806e3b4-947a-42f2-dee0-3f2cbd5487f9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-55-2685788363.py:2: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
            "  df = pd.read_sql(query, con=conn)  # Use pandas read_sql\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   hazardous_asteroid_count\n",
              "0                       616"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0f8e8b38-2f3e-4749-a6a1-b9711ac535f6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>hazardous_asteroid_count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>616</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0f8e8b38-2f3e-4749-a6a1-b9711ac535f6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0f8e8b38-2f3e-4749-a6a1-b9711ac535f6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0f8e8b38-2f3e-4749-a6a1-b9711ac535f6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"show_query(Add_4)\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"hazardous_asteroid_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 616,\n        \"max\": 616,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          616\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Additional Query 4: Total unique hazardous asteroids\n",
        "Add_4 = '''\n",
        "SELECT COUNT(DISTINCT id) AS hazardous_asteroid_count\n",
        "FROM asteroids\n",
        "WHERE is_potentially_hazardous_asteroid = 1\n",
        "'''\n",
        "show_query(Add_4)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        },
        "id": "XOrgzHTQTB-Z",
        "outputId": "820fcd46-4a22-4f43-d021-48e6172eab7f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-55-2685788363.py:2: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.\n",
            "  df = pd.read_sql(query, con=conn)  # Use pandas read_sql\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "    neo_reference_id         name  close_pass_count\n",
              "0           54427461  (2024 BA16)                 8\n",
              "1           54425949   (2024 CY1)                 8\n",
              "2           54430717   (2024 EL3)                 8\n",
              "3           54422161   (2024 BR2)                 8\n",
              "4           54426745   (2024 CM5)                 8\n",
              "..               ...          ...               ...\n",
              "218         54534775    (2025 MC)                 2\n",
              "219         54533007   (2025 KE1)                 2\n",
              "220         54528737    (2025 JE)                 2\n",
              "221         54528735    (2025 JB)                 2\n",
              "222          3634154   (2013 GM3)                 2\n",
              "\n",
              "[223 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-188b2714-63f6-4df8-a675-597822264922\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>neo_reference_id</th>\n",
              "      <th>name</th>\n",
              "      <th>close_pass_count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>54427461</td>\n",
              "      <td>(2024 BA16)</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>54425949</td>\n",
              "      <td>(2024 CY1)</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>54430717</td>\n",
              "      <td>(2024 EL3)</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>54422161</td>\n",
              "      <td>(2024 BR2)</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>54426745</td>\n",
              "      <td>(2024 CM5)</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>218</th>\n",
              "      <td>54534775</td>\n",
              "      <td>(2025 MC)</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>219</th>\n",
              "      <td>54533007</td>\n",
              "      <td>(2025 KE1)</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220</th>\n",
              "      <td>54528737</td>\n",
              "      <td>(2025 JE)</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>221</th>\n",
              "      <td>54528735</td>\n",
              "      <td>(2025 JB)</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>222</th>\n",
              "      <td>3634154</td>\n",
              "      <td>(2013 GM3)</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>223 rows × 3 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-188b2714-63f6-4df8-a675-597822264922')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-188b2714-63f6-4df8-a675-597822264922 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-188b2714-63f6-4df8-a675-597822264922');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-9b751f92-b60a-4269-84f2-9d4ff0bcdb16\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9b751f92-b60a-4269-84f2-9d4ff0bcdb16')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-9b751f92-b60a-4269-84f2-9d4ff0bcdb16 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"show_query(Add_5)\",\n  \"rows\": 223,\n  \"fields\": [\n    {\n      \"column\": \"neo_reference_id\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 223,\n        \"samples\": [\n          \"54502879\",\n          \"54499725\",\n          \"54494471\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 223,\n        \"samples\": [\n          \"(2024 XH1)\",\n          \"(2024 VW4)\",\n          \"(2024 US)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"close_pass_count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 2,\n        \"max\": 8,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          6,\n          2,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "# 💡 Additional Query 5: Asteroids that passed within 1 LD more than once\n",
        "Add_5 = '''\n",
        "SELECT ca.neo_reference_id, a.name, COUNT(*) AS close_pass_count\n",
        "FROM close_approach ca\n",
        "JOIN asteroids a ON ca.neo_reference_id = a.id\n",
        "WHERE ca.miss_distance_lunar < 1\n",
        "GROUP BY ca.neo_reference_id\n",
        "HAVING COUNT(*) > 1\n",
        "ORDER BY close_pass_count DESC\n",
        "'''\n",
        "show_query(Add_5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "ska9sVj0Thj8",
        "outputId": "68598cc4-b605-4641-f0ab-e7cdd52bee33"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting streamlit\n",
            "  Downloading streamlit-1.47.0-py3-none-any.whl.metadata (9.0 kB)\n",
            "Collecting streamlit_option_menu\n",
            "  Downloading streamlit_option_menu-0.4.0-py3-none-any.whl.metadata (2.5 kB)\n",
            "Requirement already satisfied: altair<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.0)\n",
            "Requirement already satisfied: blinker<2,>=1.5.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (1.9.0)\n",
            "Requirement already satisfied: cachetools<7,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.2)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (8.2.1)\n",
            "Requirement already satisfied: numpy<3,>=1.23 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.0.2)\n",
            "Requirement already satisfied: packaging<26,>=20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (24.2)\n",
            "Requirement already satisfied: pandas<3,>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.2.2)\n",
            "Requirement already satisfied: pillow<12,>=7.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (11.2.1)\n",
            "Requirement already satisfied: protobuf<7,>=3.20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.29.5)\n",
            "Requirement already satisfied: pyarrow>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (18.1.0)\n",
            "Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.32.3)\n",
            "Requirement already satisfied: tenacity<10,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (8.5.0)\n",
            "Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.11/dist-packages (from streamlit) (0.10.2)\n",
            "Requirement already satisfied: typing-extensions<5,>=4.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (4.14.1)\n",
            "Collecting watchdog<7,>=2.1.5 (from streamlit)\n",
            "  Downloading watchdog-6.0.0-py3-none-manylinux2014_x86_64.whl.metadata (44 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.3/44.3 kB\u001b[0m \u001b[31m1.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /usr/local/lib/python3.11/dist-packages (from streamlit) (3.1.44)\n",
            "Collecting pydeck<1,>=0.8.0b4 (from streamlit)\n",
            "  Downloading pydeck-0.9.1-py2.py3-none-any.whl.metadata (4.1 kB)\n",
            "Requirement already satisfied: tornado!=6.5.0,<7,>=6.0.3 in /usr/local/lib/python3.11/dist-packages (from streamlit) (6.4.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (3.1.6)\n",
            "Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (4.24.0)\n",
            "Requirement already satisfied: narwhals>=1.14.2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (1.47.0)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.12)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2025.7.14)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->altair<6,>=4.0->streamlit) (3.0.2)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (25.3.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2025.4.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.36.2)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.26.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas<3,>=1.4.0->streamlit) (1.17.0)\n",
            "Downloading streamlit-1.47.0-py3-none-any.whl (9.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.9/9.9 MB\u001b[0m \u001b[31m68.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading streamlit_option_menu-0.4.0-py3-none-any.whl (829 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m829.3/829.3 kB\u001b[0m \u001b[31m50.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading pydeck-0.9.1-py2.py3-none-any.whl (6.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.9/6.9 MB\u001b[0m \u001b[31m110.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading watchdog-6.0.0-py3-none-manylinux2014_x86_64.whl (79 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m79.1/79.1 kB\u001b[0m \u001b[31m6.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: watchdog, pydeck, streamlit, streamlit_option_menu\n",
            "Successfully installed pydeck-0.9.1 streamlit-1.47.0 streamlit_option_menu-0.4.0 watchdog-6.0.0\n"
          ]
        }
      ],
      "source": [
        "#\"Setup: Installing Streamlit and streamlit_option_menu\"\n",
        "#streamlit — a popular Python framework to build interactive web apps for data science and ML.\n",
        "#streamlit_option_menu — an add-on package to create stylish sidebar or horizontal option menus easily in Streamlit apps.\n",
        "!pip install streamlit streamlit_option_menu"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "922c8c7d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "928a8475-f7d0-4bfd-ffb9-4d4080e24087"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Writing Nasa.py\n"
          ]
        }
      ],
      "source": [
        "#\"Interactive Streamlit Dashboard for NASA Asteroid Data from TiDB Cloud MySQL\"\n",
        "%%writefile Nasa.py\n",
        "# NASA Asteroid Tracker App using Streamlit\n",
        "\n",
        "import streamlit as st\n",
        "import pandas as pd\n",
        "from datetime import datetime\n",
        "import mysql.connector\n",
        "from streamlit_option_menu import option_menu\n",
        "\n",
        "# MySQL connection setup\n",
        "conn = mysql.connector.connect(\n",
        "    host=\"gateway01.eu-central-1.prod.aws.tidbcloud.com\",\n",
        "    user=\"Tf6RqboHNPV8kyH.root\",\n",
        "    password=\"fn8OtaiwT8YNm99R\",\n",
        "    port=4000,\n",
        "    database=\"Nasa\"\n",
        ")\n",
        "cursor = conn.cursor()\n",
        "\n",
        "# Page config\n",
        "st.set_page_config(layout=\"wide\")\n",
        "st.markdown(\"<h1 style='text-align: center; color: #4B8BBE;'>🚀 NASA Asteroid Tracker 🌠</h1>\", unsafe_allow_html=True)\n",
        "st.divider()\n",
        "\n",
        "# Sidebar menu\n",
        "with st.sidebar:\n",
        "    selected = option_menu(\n",
        "        menu_title=\"Asteroid Approaches\",\n",
        "        options=[\"Filter Criteria\", \"Queries\"],\n",
        "        icons=[\"filter\", \"list\"],\n",
        "        menu_icon=\"cast\",\n",
        "        default_index=0\n",
        "    )\n",
        "\n",
        "# --- Filter Section ---\n",
        "if selected == \"Filter Criteria\":\n",
        "    c1, a, c2, b, c3 = st.columns([0.2, 0.1, 0.2, 0.1, 0.2])\n",
        "\n",
        "    with c1:\n",
        "        mag_min = st.slider(\"Magnitude Range\", 13.8, 32.61, (13.8, 32.61))\n",
        "        diam_min = st.slider(\"Min Estimated Diameter (km)\", 0.00, 4.62, (0.00, 4.62))\n",
        "        diam_max = st.slider(\"Max Estimated Diameter (km)\", 0.00, 10.33, (0.00, 10.33))\n",
        "\n",
        "    with c2:\n",
        "        velocity = st.slider(\"Relative Velocity\", 1418.21, 173071.83, (1418.21, 173071.83))\n",
        "        astro = st.slider(\"Astronomical Unit\", 5.16453e-05, 0.4999515747)\n",
        "        hazardous = st.selectbox(\"Potentially Hazardous?\", options=[0, 1], index=0)\n",
        "\n",
        "    with c3:\n",
        "        start_date = st.date_input(\"Start Date\", datetime(2024, 1, 1))\n",
        "        end_date = st.date_input(\"End Date\", datetime(2025, 4, 13))\n",
        "\n",
        "    button = st.button(\"Apply Filter\")\n",
        "\n",
        "    if button:\n",
        "        query = \"\"\"\n",
        "            SELECT\n",
        "                asteroids.id, asteroids.name, asteroids.absolute_magnitude_h,\n",
        "                asteroids.estimated_diameter_min_km, asteroids.estimated_diameter_max_km,\n",
        "                asteroids.is_potentially_hazardous_asteroid,\n",
        "                close_approach.neo_reference_id, close_approach.close_approach_date,\n",
        "                close_approach.relative_velocity_kmph, close_approach.astronomical,\n",
        "                close_approach.miss_distance_km,\n",
        "                close_approach.orbiting_body\n",
        "            FROM asteroids\n",
        "            JOIN close_approach ON asteroids.id = close_approach.neo_reference_id\n",
        "            WHERE asteroids.absolute_magnitude_h BETWEEN %s AND %s\n",
        "              AND asteroids.estimated_diameter_min_km BETWEEN %s AND %s\n",
        "              AND asteroids.estimated_diameter_max_km BETWEEN %s AND %s\n",
        "              AND close_approach.relative_velocity_kmph BETWEEN %s AND %s\n",
        "              AND close_approach.close_approach_date BETWEEN %s AND %s\n",
        "              AND asteroids.is_potentially_hazardous_asteroid = %s\n",
        "        \"\"\"\n",
        "        params = [\n",
        "            mag_min[0], mag_min[1],\n",
        "            diam_min[0], diam_min[1],\n",
        "            diam_max[0], diam_max[1],\n",
        "            velocity[0], velocity[1],\n",
        "            start_date, end_date,\n",
        "            hazardous\n",
        "        ]\n",
        "        cursor.execute(query, params)\n",
        "        rows = cursor.fetchall()\n",
        "        columns = [desc[0] for desc in cursor.description]\n",
        "        df = pd.DataFrame(rows, columns=columns)\n",
        "        st.subheader(\":satellite: Filtered Asteroids\")\n",
        "        st.dataframe(df, use_container_width=True)\n",
        "\n",
        "# --- Queries Section ---\n",
        "elif selected == \"Queries\":\n",
        "    queries = {\n",
        "        '1.Count how many times each asteroid has approached Earth': \"\"\"\n",
        "            SELECT asteroids.name, COUNT(*) AS approach_count\n",
        "            FROM close_approach\n",
        "            JOIN asteroids ON asteroids.id = close_approach.neo_reference_id\n",
        "            GROUP BY asteroids.name\n",
        "            ORDER BY approach_count DESC\n",
        "        \"\"\",\n",
        "        '2.Average velocity of each asteroid over multiple approaches': \"\"\"\n",
        "            SELECT asteroids.name, ROUND(AVG(close_approach.relative_velocity_kmph), 2) AS avg_velocity\n",
        "            FROM close_approach\n",
        "            JOIN asteroids ON asteroids.id = close_approach.neo_reference_id\n",
        "            GROUP BY asteroids.name\n",
        "            ORDER BY avg_velocity DESC\n",
        "        \"\"\",\n",
        "        '3.List top 10 fastest asteroids': \"\"\"\n",
        "            SELECT asteroids.name, close_approach.relative_velocity_kmph\n",
        "            FROM close_approach\n",
        "            JOIN asteroids ON asteroids.id = close_approach.neo_reference_id\n",
        "            ORDER BY close_approach.relative_velocity_kmph DESC\n",
        "            LIMIT 10\n",
        "        \"\"\",\n",
        "        '4.Find potentially hazardous asteroids that have approached Earth more than 3 times': \"\"\"\n",
        "            SELECT asteroids.name, COUNT(*) AS approach_count\n",
        "            FROM close_approach\n",
        "            JOIN asteroids ON asteroids.id = close_approach.neo_reference_id\n",
        "            WHERE asteroids.is_potentially_hazardous_asteroid = 1\n",
        "            GROUP BY asteroids.name\n",
        "            HAVING approach_count > 3\n",
        "            ORDER BY approach_count DESC\n",
        "        \"\"\",\n",
        "        '5.Find the month with the most asteroid approaches': \"\"\"\n",
        "            SELECT MONTH(close_approach_date) AS month, COUNT(*) AS total_approaches\n",
        "            FROM close_approach\n",
        "            GROUP BY month\n",
        "            ORDER BY total_approaches DESC\n",
        "            LIMIT 1\n",
        "        \"\"\",\n",
        "        '6.Get the asteroid with the fastest ever approach speed': \"\"\"\n",
        "            SELECT asteroids.name, close_approach.relative_velocity_kmph\n",
        "            FROM close_approach\n",
        "            JOIN asteroids ON asteroids.id = close_approach.neo_reference_id\n",
        "            ORDER BY close_approach.relative_velocity_kmph DESC\n",
        "            LIMIT 1\n",
        "        \"\"\",\n",
        "        '7.Sort asteroids by maximum estimated diameter (descending)': \"\"\"\n",
        "            SELECT name, estimated_diameter_max_km\n",
        "            FROM asteroids\n",
        "            ORDER BY estimated_diameter_max_km DESC\n",
        "        \"\"\",\n",
        "        '8.An asteroid whose closest approach is getting nearer over time': \"\"\"\n",
        "            SELECT asteroids.name, close_approach.close_approach_date, close_approach.miss_distance_km\n",
        "            FROM close_approach\n",
        "            JOIN asteroids ON asteroids.id = close_approach.neo_reference_id\n",
        "            ORDER BY asteroids.name, close_approach.close_approach_date\n",
        "        \"\"\",\n",
        "        '9.Display the name of each asteroid along with the date and miss distance of its closest approach to Earth': \"\"\"\n",
        "            SELECT a.name, c.close_approach_date, c.miss_distance_km\n",
        "            FROM close_approach c\n",
        "            JOIN asteroids a ON a.id = c.neo_reference_id\n",
        "            WHERE (a.name, c.miss_distance_km) IN (\n",
        "                SELECT a2.name, MIN(c2.miss_distance_km)\n",
        "                FROM close_approach c2\n",
        "                JOIN asteroids a2 ON a2.id = c2.neo_reference_id\n",
        "                GROUP BY a2.name\n",
        "            )\n",
        "        \"\"\",\n",
        "        '10.List names of asteroids that approached Earth with velocity > 50,000 km/h': \"\"\"\n",
        "            SELECT DISTINCT asteroids.name, close_approach.relative_velocity_kmph\n",
        "            FROM close_approach\n",
        "            JOIN asteroids ON asteroids.id = close_approach.neo_reference_id\n",
        "            WHERE close_approach.relative_velocity_kmph > 50000\n",
        "        \"\"\",\n",
        "        '11.Count how many approaches happened per month': \"\"\"\n",
        "            SELECT MONTH(close_approach_date) AS month, COUNT(*) AS count\n",
        "            FROM close_approach\n",
        "            GROUP BY month\n",
        "            ORDER BY month\n",
        "        \"\"\",\n",
        "        '12.Find asteroid with the highest brightness (lowest magnitude value)': \"\"\"\n",
        "            SELECT name, absolute_magnitude_h\n",
        "            FROM asteroids\n",
        "            ORDER BY absolute_magnitude_h ASC\n",
        "            LIMIT 1\n",
        "        \"\"\",\n",
        "        '13.Get number of hazardous vs non-hazardous asteroids': \"\"\"\n",
        "            SELECT is_potentially_hazardous_asteroid, COUNT(*) AS count\n",
        "            FROM asteroids\n",
        "            GROUP BY is_potentially_hazardous_asteroid\n",
        "        \"\"\",\n",
        "        '14.Find asteroids that passed closer than the Moon (less than 1 LD), with date and distance': \"\"\"\n",
        "            SELECT a.name, c.close_approach_date, c.miss_distance_lunar\n",
        "            FROM close_approach c\n",
        "            JOIN asteroids a ON a.id = c.neo_reference_id\n",
        "            WHERE c.miss_distance_lunar < 1\n",
        "        \"\"\",\n",
        "        '15.Find asteroids that came within 0.05 AU': \"\"\"\n",
        "            SELECT a.name, c.close_approach_date, c.astronomical\n",
        "            FROM close_approach c\n",
        "            JOIN asteroids a ON a.id = c.neo_reference_id\n",
        "            WHERE c.astronomical < 0.05\n",
        "        \"\"\",\n",
        "        '16.List the Most frequently orbiting body (other than Earth)': \"\"\"\n",
        "            SELECT orbiting_body, COUNT(*) AS count\n",
        "            FROM close_approach\n",
        "            WHERE orbiting_body != 'Earth'\n",
        "            GROUP BY orbiting_body\n",
        "            ORDER BY count DESC\n",
        "            LIMIT 1\n",
        "        \"\"\",\n",
        "        '17.Calculate the Average miss distance by hazard type': \"\"\"\n",
        "            SELECT a.is_potentially_hazardous_asteroid, ROUND(AVG(c.miss_distance_km), 2) AS avg_miss_distance\n",
        "            FROM close_approach c\n",
        "            JOIN asteroids a ON a.id = c.neo_reference_id\n",
        "            GROUP BY a.is_potentially_hazardous_asteroid\n",
        "        \"\"\",\n",
        "        '18.Find the Top 5 closest approaches to Earth': \"\"\"\n",
        "            SELECT a.name, c.close_approach_date, c.miss_distance_km\n",
        "            FROM close_approach c\n",
        "            JOIN asteroids a ON a.id = c.neo_reference_id\n",
        "            ORDER BY c.miss_distance_km ASC\n",
        "            LIMIT 5\n",
        "        \"\"\",\n",
        "        '19.Find the Total unique hazardous asteroids': \"\"\"\n",
        "            SELECT COUNT(DISTINCT name) AS total_hazardous\n",
        "            FROM asteroids\n",
        "            WHERE is_potentially_hazardous_asteroid = 1\n",
        "        \"\"\",\n",
        "        '20.Find the Asteroids that passed within 1 LD more than once': \"\"\"\n",
        "            SELECT a.name, COUNT(*) AS close_passes\n",
        "            FROM close_approach c\n",
        "            JOIN asteroids a ON a.id = c.neo_reference_id\n",
        "            WHERE c.miss_distance_lunar < 1\n",
        "            GROUP BY a.name\n",
        "            HAVING close_passes > 1\n",
        "        \"\"\"\n",
        "    }\n",
        "\n",
        "    option = st.selectbox(\"Select your query\", list(queries.keys()))\n",
        "\n",
        "    # Execute and display selected query\n",
        "    if option:\n",
        "        cursor.execute(queries[option])\n",
        "        result = cursor.fetchall()\n",
        "        columns = [i[0] for i in cursor.description]\n",
        "        df = pd.DataFrame(result, columns=columns)\n",
        "        st.subheader(option)\n",
        "        st.dataframe(df, use_container_width=True)\n",
        "    else:\n",
        "        st.warning(\"Query not implemented yet.\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L2ISisaiUHGP",
        "outputId": "41e58425-0b86-4528-ed78-e50e348e601f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "104.196.34.65\n"
          ]
        }
      ],
      "source": [
        "  !wget -q -O - ipv4.icanhazip.com  # Password will Generated"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "913e244e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "543d34b3-e3fd-4f6e-8a24-2d4a37f1e400",
        "collapsed": true
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Collecting usage statistics. To deactivate, set browser.gatherUsageStats to false.\n",
            "\u001b[0m\n",
            "\u001b[1G\u001b[0K⠙\u001b[1G\u001b[0K⠹\u001b[1G\u001b[0K⠸\u001b[1G\u001b[0K⠼\u001b[1G\u001b[0K⠴\u001b[1G\u001b[0K⠦\u001b[1G\u001b[0K⠧\u001b[0m\n",
            "\u001b[34m\u001b[1m  You can now view your Streamlit app in your browser.\u001b[0m\n",
            "\u001b[0m\n",
            "\u001b[34m  Local URL: \u001b[0m\u001b[1mhttp://localhost:8501\u001b[0m\n",
            "\u001b[34m  Network URL: \u001b[0m\u001b[1mhttp://172.28.0.12:8501\u001b[0m\n",
            "\u001b[34m  External URL: \u001b[0m\u001b[1mhttp://104.196.34.65:8501\u001b[0m\n",
            "\u001b[0m\n",
            "\u001b[1G\u001b[0K⠇\u001b[1G\u001b[0K⠏\u001b[1G\u001b[0K⠋\u001b[1G\u001b[0K⠙\u001b[1G\u001b[0K⠹\u001b[1G\u001b[0K⠸\u001b[1G\u001b[0K⠼\u001b[1G\u001b[0K⠴\u001b[1G\u001b[0K\u001b[1G\u001b[0JNeed to install the following packages:\n",
            "localtunnel@2.0.2\n",
            "Ok to proceed? (y) \u001b[20Gy\n",
            "\n",
            "\u001b[1G\u001b[0K⠙\u001b[1G\u001b[0K⠹\u001b[1G\u001b[0K⠸\u001b[1G\u001b[0K⠼\u001b[1G\u001b[0K⠴\u001b[1G\u001b[0K⠦\u001b[1G\u001b[0K⠧\u001b[1G\u001b[0K⠇\u001b[1G\u001b[0K⠏\u001b[1G\u001b[0K⠋\u001b[1G\u001b[0K⠙\u001b[1G\u001b[0K⠹\u001b[1G\u001b[0K⠸\u001b[1G\u001b[0K⠼\u001b[1G\u001b[0K⠴\u001b[1G\u001b[0K⠦\u001b[1G\u001b[0K⠧\u001b[1G\u001b[0K⠇\u001b[1G\u001b[0K⠏\u001b[1G\u001b[0K⠋\u001b[1G\u001b[0K⠙\u001b[1G\u001b[0K⠹\u001b[1G\u001b[0K⠸\u001b[1G\u001b[0K⠼\u001b[1G\u001b[0K⠴\u001b[1G\u001b[0K⠦\u001b[1G\u001b[0K⠧\u001b[1G\u001b[0K⠇\u001b[1G\u001b[0K⠏\u001b[1G\u001b[0Kyour url is: https://twenty-ads-pick.loca.lt\n",
            "\u001b[34m  Stopping...\u001b[0m\n",
            "^C\n"
          ]
        }
      ],
      "source": [
        "# Runs your Streamlit app (Nasa.py) locally on port 8501.\n",
        "#Starts a localtunnel session to expose your local Streamlit server to the internet via a public URL.\n",
        "\n",
        "!streamlit run Nasa.py & npx localtunnel --port 8501"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNWBaqWC8/qRHHnKwG1cNZx",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}